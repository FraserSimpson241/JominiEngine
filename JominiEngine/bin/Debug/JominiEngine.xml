<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JominiEngine</name>
    </assembly>
    <members>
        <member name="T:JominiEngine.Ailment">
            <summary>
            Class storing data on ailments effecting character health
            </summary>
        </member>
        <member name="P:JominiEngine.Ailment.ailmentID">
            <summary>
            Holds ailment ID
            </summary>
        </member>
        <member name="P:JominiEngine.Ailment.description">
            <summary>
            Holds ailment description
            </summary>
        </member>
        <member name="P:JominiEngine.Ailment.when">
            <summary>
            Holds ailment date
            </summary>
        </member>
        <member name="P:JominiEngine.Ailment.effect">
            <summary>
            Holds current ailment effect
            </summary>
        </member>
        <member name="P:JominiEngine.Ailment.minimumEffect">
            <summary>
            Holds minimum ailment effect
            </summary>
        </member>
        <member name="M:JominiEngine.Ailment.#ctor(System.String,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            Constructor for Ailment
            </summary>
            <param name="id">String holding ailment ID</param>
            <param name="descr">string holding ailment description</param>
            <param name="wh">string holding ailment date</param>
            <param name="eff">uint holding current ailment effect</param>
            <param name="minEff">uint holding minimum ailment effect</param>
        </member>
        <member name="M:JominiEngine.Ailment.UpdateAilment">
            <summary>
            Updates the ailment, reducing effect where approprite
            </summary>
            <returns>bool indicating whether ailment should be deleted</returns>
        </member>
        <member name="T:JominiEngine.Army">
            <summary>
            Class storing data on army 
            </summary>
            
        </member>
        <member name="P:JominiEngine.Army.armyID">
            <summary>
            Holds army ID
            </summary>
        </member>
        <member name="F:JominiEngine.Army.troops">
            <summary>
            Holds troops in army
            0 = knights
            1 = menAtArms
            2 = lightCav
            3 = longbowmen
            4 = crossbowmen
            5 = foot
            6 = rabble
            </summary>
        </member>
        <member name="P:JominiEngine.Army.leader">
            <summary>
            Holds army leader (ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Army.owner">
            <summary>
            Holds army owner (ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Army.days">
            <summary>
            Holds army's remaining days in season
            </summary>
        </member>
        <member name="P:JominiEngine.Army.location">
            <summary>
            Holds army location (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.Army.isMaintained">
            <summary>
            Indicates whether army is being actively maintained by owner
            </summary>
        </member>
        <member name="P:JominiEngine.Army.aggression">
            <summary>
            Indicates army's aggression level (automated response to combat)
            </summary>
        </member>
        <member name="P:JominiEngine.Army.combatOdds">
            <summary>
            Indicates army's combat odds value (i.e. at what odds will attempt automated combat action)
            </summary>
        </member>
        <member name="M:JominiEngine.Army.#ctor(System.String,System.String,System.String,System.Double,System.String,System.Boolean,System.Byte,System.Byte,System.UInt32[])">
            <summary>
            Constructor for Army
            </summary>
            <param name="id">String holding ID of army</param>
            <param name="ldr">string holding ID of army leader</param>
            <param name="own">string holding ID of army owner</param>
            <param name="day">double holding remaining days in season for army</param>
            <param name="loc">string holding army location (fiefID)</param>
            <param name="maint">bool indicating whether army is being actively maintained by owner</param>
            <param name="aggr">byte indicating army's aggression level</param>
            <param name="odds">byte indicating army's combat odds value</param>
            <param name="trp">uint[] holding troops in army</param>
        </member>
        <member name="M:JominiEngine.Army.#ctor">
            <summary>
            Constructor for Army taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Army.AddArmy">
            <summary>
            Performs functions associated with creating a new army
            </summary>
        </member>
        <member name="M:JominiEngine.Army.getMaintenanceCost">
            <summary>
            Calculates the maintenance cost for this army
            </summary>
            <returns>uint representing cost</returns>
        </member>
        <member name="M:JominiEngine.Army.MaintainArmy(JominiEngine.ProtoMessage@)">
            <summary>
            Maintains the specified field army
            </summary>
        </member>
        <member name="M:JominiEngine.Army.AdjustStandingOrders(System.Byte,System.Byte)">
            <summary>
            Updates the army's aggression and combatOdds values
            </summary>
            <returns>bool indicating success</returns>
            <param name="newAggroLevel">The new aggression value</param>
            <param name="newOddsValue">The new combatOdds value</param>
        </member>
        <member name="M:JominiEngine.Army.AssignNewLeader(JominiEngine.Character)">
            <summary>
            Assigns a new leader to the army
            </summary>
            <remarks>
            Predicate: assumes leader is in same fief as army
            NOTE: you CAN assign a null character as leader (i.e. the army becomes leaderless)
            </remarks>
            /// <param name="newLeader">The new leader (can be null)</param>
        </member>
        <member name="M:JominiEngine.Army.CalcArmySize">
            <summary>
            Calculates total army size
            </summary>
            <returns>uint containing army size</returns>
        </member>
        <member name="M:JominiEngine.Army.MoveArmy(System.Boolean)">
            <summary>
            Moves army to another fief
            </summary>
            <remarks>
            Predicate: assumes leader has enough days for movement
            Must be called from within MoveCharacter!
            If moving a leaderless army, use MoveWithoutLeader
            </remarks>
            <returns>bool indicating success</returns>
            <param name="showAttrition">bool indicating whether to display message containing attrition losses</param>
        </member>
        <member name="M:JominiEngine.Army.CalcMovementModifier">
            <summary>
            Calculates movement modifier for the army
            </summary>
            <returns>uint containing movement modifier</returns>
        </member>
        <member name="M:JominiEngine.Army.CalcAttrition">
            <summary>
            Calculates attrition for the army
            </summary>
            <returns>double containing casualty modifier to be applied troops</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Army.ApplyTroopLosses(System.Double)" -->
        <member name="M:JominiEngine.Army.CreateDetachment(System.UInt32[],System.String,JominiEngine.ProtoMessage@)">
            <summary>
            Creates a detachment from the army's troops and leaves it in the fief
            </summary>
            <remarks>
            Predicate: assumes details[0] through details[details.Length-1] contain strings that can be converted to uint
            </remarks>
            <returns>bool indicating success of transfer</returns>
            <param name="details">string[] containing troop numbers and recipient (ID)</param>
        </member>
        <member name="M:JominiEngine.Army.CalculateCombatValue(System.Int32)">
            <summary>
            Calculates the army's combat value for a combat engagement (NOTE: doesn't include leadership modifier)
            </summary>
            <returns>double containing combat value</returns>
            <param name="keepLvl">Keep level (if for a keep storm)</param>
        </member>
        <member name="M:JominiEngine.Army.GetTroopsEstimate(JominiEngine.Character)">
            <summary>
            Calculates the estimated number of troops of all types in the army
            </summary>
            <returns>uint[] containing estimated troop numbers for all types</returns>
            <param name="observer">The character making the estimate</param>
        </member>
        <member name="M:JominiEngine.Army.GetLocation">
            <summary>
            Gets the army's location (fief)
            </summary>
            <returns>the fief</returns>
        </member>
        <member name="M:JominiEngine.Army.GetOwner">
            <summary>
            Gets the army's owner
            </summary>
            <returns>the owner</returns>
        </member>
        <member name="M:JominiEngine.Army.GetLeader">
            <summary>
            Gets the army's leader
            </summary>
            <returns>the leader</returns>
        </member>
        <member name="M:JominiEngine.Army.MoveWithoutLeader(JominiEngine.Fief,System.Double,JominiEngine.ProtoMessage@)">
            <summary>
            Performs functions associated with army move for an army unaccompanied by a leader 
            </summary>
            <remarks>
            Predicate: assumes army has no leader
            Predicate: assumes army has sufficient days
            </remarks>
            <param name="target">The fief to move to</param>
            <param name="travelCost">The cost of moving to target fief</param>
        </member>
        <member name="M:JominiEngine.Army.CheckIfBesieger">
            <summary>
            Checks to see if army is besieging a fief/keep
            </summary>
            <returns>string containing the siegeID</returns>
        </member>
        <member name="M:JominiEngine.Army.CheckIfSiegeDefenderGarrison">
            <summary>
            Checks to see if army is the defending garrison in a siege
            </summary>
            <returns>string containing the siegeID</returns>
        </member>
        <member name="M:JominiEngine.Army.CheckIfSiegeDefenderAdditional">
            <summary>
            Checks to see if army is an additional defending army in a siege
            </summary>
            <returns>string containing the siegeID</returns>
        </member>
        <member name="M:JominiEngine.Army.CheckForSiegeRole">
            <summary>
            Checks to see if army has any role (defending or besieging) in a siege
            </summary>
            <returns>string containing the siegeID</returns>
        </member>
        <member name="M:JominiEngine.Army.GetSiege">
            <summary>
            Gets the siege object associated with the army (or null)
            </summary>
            <returns>The siege</returns>
        </member>
        <member name="M:JominiEngine.Army.UpdateArmy">
            <summary>
            Updates army data at the end/beginning of the season
            </summary>
            <returns>bool indicating if army has dissolved</returns>
        </member>
        <member name="M:JominiEngine.Army.ChecksBeforeAttack(JominiEngine.Army,JominiEngine.ProtoMessage@)">
            <summary>
            Runs conditional checks prior to the army launching an attack on another army
            </summary>
            <returns>bool indicating whether attack can proceed</returns>
            <param name="targetArmy">The army to be attacked</param>
        </member>
        <member name="M:JominiEngine.Army.DisbandArmy">
            <summary>
            Disbands the army
            </summary>
        </member>
        <member name="M:JominiEngine.Army.CalculateTroopTypeAdvatages(System.UInt32[])">
            <summary>
            Calculates any advantages troops may have against an enemy army based on how effective certain troop types are against each other
            </summary>
            <param name="enemyTroops">Array of enemy troops</param>
            <returns>Resulting advantage based on calculations</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Army.CalculateBattleValues(JominiEngine.Army,System.Int32,System.Boolean)" -->
        <member name="M:JominiEngine.Army.ProcessRetreat(System.Int32)">
            <summary>
            Process the retreat of the army
            </summary>
            <param name="retreatDistance">The retreat distance</param>
        </member>
        <member name="M:JominiEngine.Army.ProcessPickups(System.String[])">
            <summary>
            Processes the addition of one or more detachments to the army
            Returns an error message on fail
            UPDATE: Can now leave detachments for other players. Allows to better team play
            </summary>
            <param name="detachments">The detachments to add</param>
        </member>
        <member name="M:JominiEngine.Battle.BringToBattle(System.UInt32,System.UInt32,System.String)">
            <summary>
            Calculates whether the attacking army is able to successfully bring the defending army to battle
            </summary>
            <returns>bool indicating whether battle has commenced</returns>
            <param name="attackerValue">uint containing attacking army battle value</param>
            <param name="defenderValue">uint containing defending army battle value</param>
            <param name="circumstance">string indicating circumstance of battle</param>
        </member>
        <member name="M:JominiEngine.Battle.DecideBattleVictory(System.UInt32,System.UInt32)">
            <summary>
            Determines whether the attacking army is victorious in a battle
            </summary>
            <returns>bool indicating whether attacking army is victorious</returns>
            <param name="attackerValue">uint containing attacking army battle value</param>
            <param name="defenderValue">uint containing defending army battle value</param>
        </member>
        <member name="M:JominiEngine.Battle.CalcVictoryChance(System.UInt32,System.UInt32)">
            <summary>
            Calculates chance that the attacking army will be victorious in a battle
            </summary>
            <returns>double containing percentage chance of victory</returns>
            <param name="attackerValue">uint containing attacking army battle value</param>
            <param name="defenderValue">uint containing defending army battle value</param>
        </member>
        <member name="M:JominiEngine.Battle.CalculateBattleCasualties(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Calculates casualties from a battle for both sides
            </summary>
            <returns>double[] containing percentage loss modifier for each side</returns>
            <param name="attackerTroops">uint containing attacking army troop numbers</param>
            <param name="defenderTroops">uint containing defending army troop numbers</param>
            <param name="attackerValue">uint containing attacking army battle value</param>
            <param name="defenderValue">uint containing defending army battle value</param>
            <param name="attackerVictorious">bool indicating whether attacking army was victorious</param>
        </member>
        <member name="M:JominiEngine.Battle.CheckForRetreat(JominiEngine.Army,JominiEngine.Army,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates whether either army has retreated due to the outcome of a battle
            </summary>
            <returns>int[] indicating the retreat distance (fiefs) of each army. First index is attacker, second is defender</returns>
            <param name="attacker">The attacking army</param>
            <param name="defender">The defending army</param>
            <param name="aCasualties">The attacking army casualty modifier</param>
            <param name="dCasualties">The defending army casualty modifier</param>
            <param name="attackerVictorious">bool indicating if attacking army was victorious</param>
        </member>
        <member name="M:JominiEngine.Battle.GetBattleOdds(JominiEngine.Army,JominiEngine.Army)">
            <summary>
            Calculates rough battle odds between two armies (i.e ratio of attacking army combat
            value to defending army combat value).  NOTE: does not involve leadership values
            </summary>
            <returns>int containing battle odds</returns>
            <param name="attacker">The attacking army</param>
            <param name="defender">The defending army</param>
        </member>
        <member name="M:JominiEngine.Battle.DisplayBattleResults(JominiEngine.ProtoBattle)">
            <summary>
            Return a string describing the results of a battle
            </summary>
            <param name="battle">Results of battle</param>
            <returns>String description</returns>
        </member>
        <member name="M:JominiEngine.Battle.DisplaySiegeResults(JominiEngine.ProtoBattle)">
            <summary>
            Display the results of a siege (that has been resolved due to a battle) in a human readable format
            </summary>
            <param name="battle">Results of battle</param>
            <returns>String describing battle</returns>
        </member>
        <member name="M:JominiEngine.Battle.GiveBattle(JominiEngine.Army,JominiEngine.Army,JominiEngine.ProtoBattle@,System.String)">
            <summary>
            Implements the processes involved in a battle between two armies in the field
            </summary>
            <returns>bool indicating whether attacking army is victorious</returns>
            <remarks>
            Predicate: assumes attacker has sufficient days
            Predicate: assumes attacker has leader
            Predicate: assumes attacker in same fief as defender
            Predicate: assumes defender not besieged in keep
            Predicate: assumes attacker and defender not same army
            </remarks>
            <param name="attacker">The attacking army</param>
            <param name="defender">The defending army</param>
            <param name="circumstance">string indicating circumstance of battle</param>
        </member>
        <member name="M:JominiEngine.Birth.GenerateNewNPC(JominiEngine.Character,JominiEngine.Character)">
            <summary>
            Generates a new NPC based on parents' statistics
            </summary>
            <returns>NonPlayerCharacter or null</returns>
            <param name="mummy">The new NPC's mother</param>
            <param name="daddy">The new NPC's father</param>
        </member>
        <member name="M:JominiEngine.Birth.GenerateSex">
            <summary>
            Generates a random sex for a Character
            </summary>
            <returns>bool indicating whether is male</returns>
        </member>
        <member name="M:JominiEngine.Birth.GenerateKeyCharacteristics(System.Double,System.Double)">
            <summary>
            Generates a characteristic stat for a Character, based on parent stats
            </summary>
            <returns>Double containing characteristic stat</returns>
            <param name="mummyStat">The mother's characteristic stat</param>
            <param name="daddyStat">The father's characteristic stat</param>
        </member>
        <member name="M:JominiEngine.Birth.GenerateTraitSetFromParents(System.Tuple{JominiEngine.Trait,System.Int32}[],System.Tuple{JominiEngine.Trait,System.Int32}[],System.Boolean)">
            <summary>
            Generates a trait set for a Character, based on parent traits
            </summary>
            <returns>Array containing trait set</returns>
            <param name="mummyTraits">The mother's traits</param>
            <param name="daddyTraits">The father's traits</param>
            <param name="isMale">Whether character is a male</param>
        </member>
        <member name="M:JominiEngine.Birth.ChecksBeforePregnancyAttempt(JominiEngine.Character,JominiEngine.ProtoMessage@)">
            <summary>
            Performs standard conditional checks before a pregnancy attempt
            </summary>
            <returns>bool indicating whether or not to proceed with pregnancy attempt</returns>
            <param name="husband">The husband</param>
        </member>
        <member name="T:JominiEngine.Character">
            <summary>
            Class storing data on character (PC and NPC)
            </summary>
        </member>
        <member name="P:JominiEngine.Character.charID">
            <summary>
            Holds character ID
            </summary>
        </member>
        <member name="P:JominiEngine.Character.firstName">
            <summary>
            Holds character's first name
            </summary>
        </member>
        <member name="P:JominiEngine.Character.familyName">
            <summary>
            Holds character's family name
            </summary>
        </member>
        <member name="P:JominiEngine.Character.birthDate">
            <summary>
            Tuple holding character's year and season of birth
            </summary>
        </member>
        <member name="P:JominiEngine.Character.isMale">
            <summary>
            Holds if character male
            </summary>
        </member>
        <member name="P:JominiEngine.Character.nationality">
            <summary>
            Holds character nationality
            </summary>
        </member>
        <member name="P:JominiEngine.Character.isAlive">
            <summary>
            bool indicating whether character is alive
            </summary>
        </member>
        <member name="P:JominiEngine.Character.maxHealth">
            <summary>
            Holds character maximum health
            </summary>
        </member>
        <member name="P:JominiEngine.Character.virility">
            <summary>
            Holds character virility
            </summary>
        </member>
        <member name="F:JominiEngine.Character.goTo">
            <summary>
            Queue of Fiefs to auto-travel to
            </summary>
        </member>
        <member name="P:JominiEngine.Character.language">
            <summary>
            Holds character's language and dialect
            </summary>
        </member>
        <member name="P:JominiEngine.Character.days">
            <summary>
            Holds character's remaining days in season
            </summary>
        </member>
        <member name="P:JominiEngine.Character.statureModifier">
            <summary>
            Holds modifier to character's base stature
            </summary>
        </member>
        <member name="P:JominiEngine.Character.management">
            <summary>
            Holds character's management rating
            </summary>
        </member>
        <member name="P:JominiEngine.Character.combat">
            <summary>
            Holds character's combat rating
            </summary>
        </member>
        <member name="P:JominiEngine.Character.traits">
            <summary>
            Array holding character's traits
            </summary>
        </member>
        <member name="P:JominiEngine.Character.inKeep">
            <summary>
            bool indicating if character is in the keep
            </summary>
        </member>
        <member name="P:JominiEngine.Character.isPregnant">
            <summary>
            Holds character pregnancy status
            </summary>
        </member>
        <member name="P:JominiEngine.Character.familyID">
            <summary>
            Holds charID of head of family with which character associated
            </summary>
        </member>
        <member name="P:JominiEngine.Character.spouse">
            <summary>
            Holds spouse (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character.father">
            <summary>
            Holds father (CharID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character.mother">
            <summary>
            Holds mother (CharID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character.fiancee">
            <summary>
            Hold fiancee (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character.location">
            <summary>
            Holds current location (Fief object)
            </summary>
        </member>
        <member name="P:JominiEngine.Character.myTitles">
            <summary>
            Holds character's titles (IDs)
            </summary>
        </member>
        <member name="P:JominiEngine.Character.armyID">
            <summary>
            Holds armyID of army character is leading
            </summary>
        </member>
        <member name="F:JominiEngine.Character.ailments">
            <summary>
            Holds ailments effecting character's health
            </summary>
        </member>
        <member name="P:JominiEngine.Character.captorID">
            <summary>
            Holds the characterID of captor, if being held captive
            </summary>
        </member>
        <member name="P:JominiEngine.Character.ransomDemand">
            <summary>
            Holds the journal entry id of any ransom sent
            </summary>
        </member>
        <member name="P:JominiEngine.Character.fixedSuccessChance">
            <summary>
            Fix the success chance- use -1 to calculate success based on traits
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Character.#ctor(System.String,System.String,System.String,System.Tuple{System.UInt32,System.Byte},System.Boolean,JominiEngine.Nationality,System.Boolean,System.Double,System.Double,System.Collections.Generic.Queue{JominiEngine.Fief},JominiEngine.Language,System.Double,System.Double,System.Double,System.Double,System.Tuple{JominiEngine.Trait,System.Int32}[],System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,JominiEngine.Ailment},JominiEngine.Fief,System.String)" -->
        <member name="M:JominiEngine.Character.#ctor(JominiEngine.PlayerCharacter_Serialised,JominiEngine.NonPlayerCharacter_Serialised)">
            <summary>
            Constructor for Character using PlayerCharacter_Serialised or NonPlayerCharacter_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="pcs">PlayerCharacter_Serialised object to use as source</param>
            <param name="npcs">NonPlayerCharacter_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Character.#ctor(JominiEngine.NonPlayerCharacter,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Constructor for Character using NonPlayerCharacter object,
            for use when respawning deceased NPCs or promoting NPC to PC (after PC death)
            </summary>
            <param name="npc">NonPlayerCharacter object to use as source</param>
            <param name="circumstance">The circumstance - respawn or promotion</param>
        </member>
        <member name="M:JominiEngine.Character.CalcAge">
            <summary>
            Calculates character's age
            </summary>
            <returns>int containing character's age</returns>
        </member>
        <member name="M:JominiEngine.Character.GetHighestRank">
            <summary>
            Retrieves character's highest rank
            </summary>
            <returns>The highest rank</returns>
        </member>
        <member name="M:JominiEngine.Character.GetHighestRankPlace">
            <summary>
            Retrieves character's highest ranking places
            </summary>
            <returns>List containing character's highest ranking places</returns>
        </member>
        <member name="M:JominiEngine.Character.CalculateStature(System.Boolean)">
            <summary>
            Calculates character's base or current stature
            </summary>
            <returns>Double containing character's base stature</returns>
            <param name="type">bool indicating whether to return current stature (or just base)</param>
        </member>
        <member name="M:JominiEngine.Character.AdjustStatureModifier(System.Double)">
            <summary>
            Adjusts the character's stature modifier
            </summary>
            <param name="amountToAdd">The amount of stature to add (can be negative)</param>
        </member>
        <member name="M:JominiEngine.Character.CalculateHealth(System.Boolean)">
            <summary>
            Calculates character's base or current health
            </summary>
            <returns>Double containing character's health</returns>
            <param name="currentHealth">bool indicating whether to return current health (rather than base health)</param>
        </member>
        <member name="M:JominiEngine.Character.CheckForDeath(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Checks for character death
            </summary>
            <returns>Boolean indicating whether character dead</returns>
            <param name="isBirth">bool indicating whether check is due to birth</param>
            <param name="isMother">bool indicating whether (if check is due to birth) character is mother</param>
            <param name="isStillborn">bool indicating whether (if check is due to birth) baby was stillborn</param>
        </member>
        <member name="M:JominiEngine.Character.AbortPregnancy">
            <summary>
            Performs necessary actions for aborting a pregnancy involving the character
            </summary>
        </member>
        <member name="M:JominiEngine.Character.CancelMarriage(System.String)">
            <summary>
            Performs necessary actions for cancelling a marriage involving the character
            </summary>
            <param name="role">The role of the Character in the marriage</param>
        </member>
        <member name="M:JominiEngine.Character.AllMyTitlesToOwner">
            <summary>
            Transfers all of a character's titles back to the owner
            </summary>
        </member>
        <member name="M:JominiEngine.Character.ProcessDeath(System.String)">
            <summary>
            Performs necessary actions upon the death of a character
            </summary>
            <param name="circumstance">string containing the circumstance of the death</param>
        </member>
        <member name="M:JominiEngine.Character.CheckIfOverlord">
            <summary>
            Checks if the character is a province overlord
            </summary>
            <returns>bool indicating if the character is an overlord</returns>
        </member>
        <member name="M:JominiEngine.Character.TransferPropertyToKing(JominiEngine.PlayerCharacter,JominiEngine.PlayerCharacter)">
            <summary>
            Transfers property to the appropriate king upon the death of a PlayerCharacter with no heir
            </summary>
            <param name="deceased">Deceased PlayerCharacter</param>
            <param name="king">The king</param>
        </member>
        <member name="M:JominiEngine.Character.ProcessInheritance(JominiEngine.PlayerCharacter,JominiEngine.NonPlayerCharacter)">
            <summary>
            Performs the functions associated with the inheritance of property upon the death of a PlayerCharacter
            </summary>
            <param name="inheritor">Inheriting Character</param>
            <param name="deceased">Deceased PlayerCharacter</param>
        </member>
        <member name="M:JominiEngine.Character.RespawnNPC(JominiEngine.NonPlayerCharacter)">
            <summary>
            Creates new NonPlayerCharacter, based on supplied NonPlayerCharacter
            </summary>
            <param name="oldNPC">Old NonPlayerCharacter</param>
        </member>
        <member name="M:JominiEngine.Character.EnterKeep(JominiEngine.ProtoMessage@)">
            <summary>
            Enables character to enter keep (if not barred)
            </summary>
            <returns>bool indicating success</returns>
        </member>
        <member name="M:JominiEngine.Character.ExitKeep">
            <summary>
            Enables character to exit keep
            </summary>
            <returns>bool indicating hire-able status</returns>
        </member>
        <member name="M:JominiEngine.Character.CheckCanHire(JominiEngine.PlayerCharacter)">
            <summary>
            Checks to see if the Character can be hired by the specified PlayerCharacter
            </summary>
            <returns>bool indicating hire-able status</returns>
            <param name="hiringPC">The potential employer (PlayerCharacter)</param>
        </member>
        <member name="M:JominiEngine.Character.CalcFiefIncMod">
            <summary>
            Calculates effect of character's management rating on fief income
            </summary>
            <returns>double containing fief income modifier</returns>
        </member>
        <member name="M:JominiEngine.Character.CalcTraitEffect(JominiEngine.Globals_Game.Stats)">
            <summary>
            Calculates effect of a particular trait effect
            </summary>
            <returns>double containing trait effect modifier</returns>
            <param name="effect">string specifying which trait effect to calculate</param>
        </member>
        <member name="M:JominiEngine.Character.GetArmy">
            <summary>
            Gets the army being led by the character
            </summary>
            <returns>The army</returns>
        </member>
        <member name="M:JominiEngine.Character.GetFather">
            <summary>
            Gets character's father
            </summary>
            <returns>The father</returns>
        </member>
        <member name="M:JominiEngine.Character.GetMother">
            <summary>
            Gets character's mother
            </summary>
            <returns>The mother</returns>
        </member>
        <member name="M:JominiEngine.Character.GetHeadOfFamily">
            <summary>
            Gets character's head of family
            </summary>
            <returns>The head of the family</returns>
        </member>
        <member name="M:JominiEngine.Character.ChecksBeforeGranting(JominiEngine.PlayerCharacter,System.String,System.Boolean,JominiEngine.ProtoMessage@,System.String)">
            <summary>
            Performs conditional checks before granting a gift or postiton of responsibility
            </summary>
            <returns>bool indicating success</returns>
            <param name="type">string identify type of grant</param>
            <param name="priorToList">bool indicating if check is prior to listing possible candidates</param>
            <param name="armyID">string containing the army ID (if choosing a leader)</param>
        </member>
        <member name="M:JominiEngine.Character.ExitEnterKeep(JominiEngine.ProtoMessage@)">
            <summary>
            Allows the character to enter or exit the keep
            </summary>
            <returns>bool indicating success</returns>
        </member>
        <member name="M:JominiEngine.Character.ChecksBeforeMove(JominiEngine.Fief,System.Double,JominiEngine.ProtoMessage@,System.Boolean)">
            <summary>
            Moves character to target fief
            </summary>
            <returns>bool indicating success</returns>
            <param name="target">Target fief</param>
            <param name="cost">Travel cost (days)</param>
            <param name="siegeCheck">bool indicating whether to check whether the move would end a siege</param>
        </member>
        <member name="M:JominiEngine.Character.MoveCharacter(JominiEngine.Fief,System.Double,JominiEngine.ProtoMessage@,System.Boolean)">
            <summary>
            Moves character to target fief
            </summary>
            <returns>bool indicating success</returns>
            <param name="target">Target fief</param>
            <param name="cost">Travel cost (days)</param>
            <param name="siegeCheck">bool indicating whether to check whether the move would end a siege</param>
        </member>
        <member name="M:JominiEngine.Character.GetDaysAllowance">
            <summary>
            Gets the character's full days allowance, including adjustment for traits
            </summary>
            <returns>Full days allowance</returns>
        </member>
        <member name="M:JominiEngine.Character.AdjustDays(System.Double)">
            <summary>
            Adjusts the character's remaining days by subtracting the specified number of days
            </summary>
            <param name="daysToSubtract">Number of days to subtract</param>
        </member>
        <member name="M:JominiEngine.Character.UseUpDays">
            <summary>
            Uses up the character's remaining days, which will be added to bailiffDaysInFief if appropriate
            </summary>
        </member>
        <member name="M:JominiEngine.Character.GetSpousePregnant(JominiEngine.Character,JominiEngine.ProtoMessage@)">
            <summary>
            Calculates whether character manages to get spouse pregnant
            </summary>
            <returns>bool indicating success</returns>
            <param name="wife">Character's spouse</param>
        </member>
        <member name="M:JominiEngine.Character.GiveBirth(JominiEngine.Character)">
            <summary>
            Performs childbirth procedure
            </summary>
            <returns>Boolean indicating character death occurrence</returns>
            <param name="daddy">The new NPC's father</param>
        </member>
        <member name="M:JominiEngine.Character.GetLeadershipValue(System.Boolean)">
            <summary>
            Calculates the character's leadership value (for army leaders)
            </summary>
            <returns>double containg leadership value</returns>
            <param name="isSiegeStorm">bool indicating if the circumstance is a siege storm</param>
        </member>
        <member name="M:JominiEngine.Character.GetCombatValue">
            <summary>
            Calculates the character's combat value for a combat engagement
            </summary>
            <returns>double containg combat value</returns>
        </member>
        <member name="M:JominiEngine.Character.GetEstimateVariance">
            <summary>
            Calculates the character's estimate variance when estimating the size of an enemy army
            </summary>
            <returns>double containg estimate variance</returns>
        </member>
        <member name="M:JominiEngine.Character.GetSpouse">
            <summary>
            gets the character's spouse
            </summary>
            <returns>The spouse or null</returns>
        </member>
        <member name="M:JominiEngine.Character.GetFiancee">
            <summary>
            gets the character's fiancee
            </summary>
            <returns>The spouse or null</returns>
        </member>
        <member name="M:JominiEngine.Character.UpdateCharacter">
            <summary>
            Updates character data at the end/beginning of the season
            </summary>
        </member>
        <member name="M:JominiEngine.Character.CalcFiefManagementRating">
            <summary>
            Calculates the character's fief management rating (i.e. how good they are at managing a fief)
            </summary>
            <returns>double containing fief management rating</returns>
        </member>
        <member name="M:JominiEngine.Character.CalcArmyLeadershipRating">
            <summary>
            Calculates the character's army leadership rating (i.e. how good they are at leading an army)
            </summary>
            <returns>double containing army leadership rating</returns>
        </member>
        <member name="M:JominiEngine.Character.CalculateCombatInjury(System.Double)">
            <summary>
            Calculates chance and effect of character injuries resulting from a battle
            </summary>
            <returns>bool indicating whether character has died of injuries</returns>
            <param name="armyCasualtyLevel">double indicating friendly army casualty level</param>
        </member>
        <member name="M:JominiEngine.Character.GetFiefsBailiff">
            <summary>
            Gets the fiefs in which the character is the bailiff
            </summary>
            <returns>List containing the fiefs</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Character.GetArmiesLeader" -->
        <member name="M:JominiEngine.Character.ChecksBefore_ExamineArmies(JominiEngine.ProtoMessage@)">
            <summary>
            Preforms conditional checks prior to examining armies in a fief
            </summary>
            <returns>bool indicating whether to proceed with examination</returns>
        </member>
        <member name="M:JominiEngine.Character.DisplayCharacter(System.Boolean,System.Boolean,JominiEngine.Character)">
            <summary>
            Retrieves information for Character display
            </summary>
            <returns>String containing information to display</returns>
            <param name="showFullDetails">bool indicating whether to display full character details</param>
            <param name="showTitles">bool indicating whether to display character's titles</param>
            <param name="observer">Character who is viewing this character's information</param>
        </member>
        <member name="M:JominiEngine.Character.ProposeMarriage(JominiEngine.Character)">
            <summary>
            Allows a character to propose marriage between himself and a female family member of another player 
            </summary>
            <returns>bool indicating whether proposal was processed successfully</returns>
            <param name="bride">The prospective bride</param>
        </member>
        <member name="M:JominiEngine.Character.ChecksBeforeProposal(JominiEngine.Character,JominiEngine.ProtoMessage@)">
            <summary>
            Implements conditional checks on the character and his proposed bride prior to a marriage proposal
            </summary>
            <returns>bool indicating whether proposal can proceed</returns>
            <param name="bride">The prospective bride</param>
        </member>
        <member name="M:JominiEngine.Character.RandomMoveNPC(JominiEngine.ProtoMessage@)">
            <summary>
            Moves character one hex in a random direction
            </summary>
            <returns>bool indicating success</returns>
        </member>
        <member name="M:JominiEngine.Character.CharacterMultiMove(JominiEngine.ProtoMessage@)">
            <summary>
            Moves character sequentially through fiefs stored in goTo queue
            </summary>
            <returns>bool indicating success</returns>
        </member>
        <member name="M:JominiEngine.Character.CampWaitHere(System.Byte,JominiEngine.ProtoMessage@)">
            <summary>
            Allows the character to remain in their current location for the specified
            number of days, incrementing bailiffDaysInFief if appropriate
            </summary>
            <returns>bool indicating success</returns>
            <param name="campDays">Number of days to camp</param>
        </member>
        <member name="M:JominiEngine.Character.TakeThisRoute(System.String[],JominiEngine.ProtoMessage@)">
            <summary>
            Allows the character to be moved along a specific route by using direction codes
            </summary>
            <param name="directions">string[] containing list of sequential directions to follow</param>
        </member>
        <member name="M:JominiEngine.Character.MoveTo(System.String,JominiEngine.ProtoMessage@)">
            <summary>
            Moves the character to a specified fief using the shortest path
            </summary>
            <param name="fiefID">String containing the ID of the target fief</param>
        </member>
        <member name="M:JominiEngine.Character.SpyOn(JominiEngine.Fief,JominiEngine.ProtoMessage@)">
            <summary>
            Spy on a fief to obtain information. Note: SpyCheck should be performed first
            </summary>
            <param name="fief">Fief to spy on</param>
            <param name="result"> Full details of spy result, including information if successful and spy status</param>
            <returns>boolean indicating spy success</returns>
        </member>
        <member name="M:JominiEngine.Character.GetSpySuccessChance(System.Object)">
            <summary>
            Get the success chance for spying on a target
            </summary>
            <param name="target">Target to spy on- currently Fief, Character or Army</param>
            <returns>Chance of success</returns>
        </member>
        <member name="M:JominiEngine.Character.SpyOn(JominiEngine.Character,JominiEngine.ProtoMessage@)">
            <summary>
            Spy on a character to gain additional information. Note: SpyCheck should be performed first
            </summary>
            <param name="character">Character to spy on</param>
            <param name="result">Returns protomessage containing the full spy result and any information gained</param>
            <returns>Bool indicating spy success</returns>
        </member>
        <member name="M:JominiEngine.Character.SpyOn(JominiEngine.Army,JominiEngine.ProtoMessage@)">
            <summary>
            Spy on an army to obtain information. Note: SpyCheck should be performed first
            </summary>
            <param name="army">Army to spy on</param>
            <param name="result">Result of spying, including additional information obtained</param>
            <returns>Bool for success</returns>
        </member>
        <member name="M:JominiEngine.Character.Kidnap(JominiEngine.Character,JominiEngine.ProtoMessage@)">
            <summary>
            Kidnap a character
            </summary>
            <param name="target">Character to kidnap</param>
            <param name="result">Result of kidnapping attempt or any errors</param>
            <returns>Success</returns>
        </member>
        <member name="M:JominiEngine.Character.CalculateRansom">
            <summary>
            Calculates how much this character can be ransomed for
            </summary>
            <returns>ransom amount</returns>
        </member>
        <member name="T:JominiEngine.PlayerCharacter">
            <summary>
            Class storing data on PlayerCharacter
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter.playerID">
            <summary>
            Holds ID of player who is currently playing this PlayerCharacter
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter.outlawed">
            <summary>
            Holds character outlawed status
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter.purse">
            <summary>
            Holds character's treasury
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.myNPCs">
            <summary>
            Holds character's employees and family (NonPlayerCharacter objects)
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.ownedFiefs">
            <summary>
            Holds character's owned fiefs
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.ownedProvinces">
            <summary>
            Holds character's owned provinces
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter.homeFief">
            <summary>
            Holds character's home fief (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter.ancestralHomeFief">
            <summary>
            Holds character's ancestral home fief (fiefID)
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.myArmies">
            <summary>
            Holds character's armies (Army objects)
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.mySieges">
            <summary>
            Holds character's sieges (siegeIDs)
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.myEntourage">
            <summary>
            Holds Characters in entourage
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.activeProposals">
            <summary>
            Dictionary holding active proposals from family members to other NPCs. Each family member can only propose to one person at a time
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter.myCaptives">
            <summary>
            Holds a list of all characters that have been taken captive (during battle, siege, kidnapping, failed spy attempts etc)
            </summary>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.#ctor(System.String,System.String,System.String,System.Tuple{System.UInt32,System.Byte},System.Boolean,JominiEngine.Nationality,System.Boolean,System.Double,System.Double,System.Collections.Generic.Queue{JominiEngine.Fief},JominiEngine.Language,System.Double,System.Double,System.Double,System.Double,System.Tuple{JominiEngine.Trait,System.Int32}[],System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.UInt32,System.Collections.Generic.List{JominiEngine.NonPlayerCharacter},System.Collections.Generic.List{JominiEngine.Fief},System.Collections.Generic.List{JominiEngine.Province},System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{JominiEngine.Army},System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,JominiEngine.Ailment},JominiEngine.Fief,System.String,System.String)">
            <summary>
            Constructor for PlayerCharacter
            </summary>
            <param name="outl">bool holding character outlawed status</param>
            <param name="pur">uint holding character purse</param>
            <param name="npcs">List(NonPlayerCharacter) holding employees and family of character</param>
            <param name="ownedF">List(Fief) holding fiefs owned by character</param>
            <param name="ownedP">List(Province) holding provinces owned by character</param>
            <param name="home">String holding character's home fief (fiefID)</param>
            <param name="anchome">String holding character's ancestral home fief (fiefID)</param>
            <param name="pID">String holding ID of player who is currently playing this PlayerCharacter</param>
            <param name="myA">List(Army) holding character's armies</param>
            <param name="myS">List(string) holding character's sieges (siegeIDs)</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.#ctor">
            <summary>
            Constructor for PlayerCharacter taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.#ctor(JominiEngine.PlayerCharacter_Serialised)">
            <summary>
            Constructor for PlayerCharacter using PlayerCharacter_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="pcs">PlayerCharacter_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.#ctor(JominiEngine.NonPlayerCharacter,JominiEngine.PlayerCharacter)">
            <summary>
            Constructor for PlayerCharacter using NonPlayerCharacter object and a PlayerCharacter object,
            for use when promoting a deceased PC's heir
            </summary>
            <param name="npc">NonPlayerCharacter object to use as source</param>
            <param name="pc">PlayerCharacter object to use as source</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.DisplayPlayerCharacter">
            <summary>
            Retrieves PlayerCharacter-specific information for Character display 
            </summary>
            <returns>String containing information to display</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetHeir">
            <summary>
            Identifies and returns the PlayerCharacter's heir
            </summary>
            <returns>The heir (NonPlayerCharacter)</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetSiege(System.String)">
            <summary>
            Returns the siege object associated with the specified siegeID
            </summary>
            <returns>The siege object</returns>
            <param name="id">The siegeID of the siege</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetTotalGDP">
            <summary>
            Returns the current total GDP for all fiefs owned by the PlayerCharacter
            </summary>
            <returns>The current total GDP</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetHighestRankingFief">
            <summary>
            Finds the highest ranking fief(s) in the PlayerCharacter's owned fiefs
            </summary>
            <returns>A list containing the highest ranking fief(s)</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.ProcessEmployOffer(JominiEngine.NonPlayerCharacter,System.UInt32,JominiEngine.ProtoMessage@)">
            <summary>
            Processes an offer for employment
            </summary>
            <returns>bool indicating acceptance of offer</returns>
            <param name="npc">NPC receiving offer</param>
            <param name="offer">Proposed wage</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.HireNPC(JominiEngine.NonPlayerCharacter,System.UInt32)">
            <summary>
            Hire an NPC
            </summary>
            <param name="npc">NPC to hire</param>
            <param name="wage">NPC's wage</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.FireNPC(JominiEngine.NonPlayerCharacter)">
            <summary>
            Fire an NPC
            </summary>
            <param name="npc">NPC to fire</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.AddToEntourage(JominiEngine.NonPlayerCharacter)">
            <summary>
            Adds an NPC to the character's entourage
            </summary>
            <param name="npc">NPC to be added</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.RemoveFromEntourage(JominiEngine.NonPlayerCharacter)">
            <summary>
            Removes an NPC from the character's entourage
            </summary>
            <param name="npc">NPC to be removed</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.AddToOwnedFiefs(JominiEngine.Fief)">
            <summary>
            Adds a Fief to the character's list of owned fiefs
            </summary>
            <param name="f">Fief to be added</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.AddToOwnedProvinces(JominiEngine.Province)">
            <summary>
            Adds a Province to the character's list of owned provinces
            </summary>
            <param name="p">Province to be added</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.RemoveFromOwnedFiefs(JominiEngine.Fief)">
            <summary>
            Removes a Fief from the character's list of owned fiefs
            </summary>
            <param name="f">Fief to be removed</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.EnterKeep(JominiEngine.ProtoMessage@)">
            <summary>
            Extends base method allowing PlayerCharacter to enter keep (if not barred).
            Then moves entourage (if not individually barred). Ignores nationality bar
            for entourage if PlayerCharacter allowed to enter
            </summary>
            <returns>bool indicating success</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.ExitKeep">
            <summary>
            Extends base method allowing PlayerCharacter to exit keep. Then exits entourage.
            </summary>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.AdjustDays(System.Double)">
            <summary>
            Extends base method allowing PlayerCharacter to synchronise the days of their entourage
            </summary>
            <param name="daysToSubtract">Number of days to subtract</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.MoveCharacter(JominiEngine.Fief,System.Double,JominiEngine.ProtoMessage@,System.Boolean)">
            <summary>
            Extends base method allowing PlayerCharacter to target fief. Then moves entourage.
            </summary>
            <returns>bool indicating success</returns>
            <param name="target">Target fief</param>
            <param name="cost">Travel cost (days)</param>
            <param name="siegeCheck">bool indicating whether to check whether the move would end a siege</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.MoveEntourageNPC(JominiEngine.Fief,JominiEngine.NonPlayerCharacter)">
            <summary>
            Moves an NPC in a player's entourage (i.e. sets new location)
            </summary>
            <param name="target">Target fief</param>
            <param name="npc">NonPlayerCharacter to move</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.ChecksBeforeRecruitment(JominiEngine.ProtoMessage@)">
            <summary>
            Carries out conditional checks prior to recruitment
            </summary>
            <returns>bool indicating whether recruitment can proceed</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.RecruitTroops(System.UInt32,JominiEngine.Army,System.Boolean)">
            <summary>
            Recruits troops from the current fief
            </summary>
            <returns>uint containing number of troops recruited</returns>
            <param name="number">How many troops to recruit</param>
            <param name="thisArmy">Army to recruit into- null to create new army</param>
            <param name="isConfirm">Whether or not this action has been confirmed by client</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetKingdom">
            <summary>
            Gets character's kingdom
            </summary>
            <returns>The kingdom</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetKing">
            <summary>
            Gets PlayerCharacter's king
            </summary>
            <returns>The king</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetQueen">
            <summary>
            Gets character's queen
            </summary>
            <returns>The queen</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.CheckIsKing">
            <summary>
            Check to see if the PlayerCharacter is a king
            </summary>
            <returns>bool indicating whether is a king</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.CheckIsPrince">
            <summary>
            Check to see if the PlayerCharacter is a prince
            </summary>
            <returns>bool indicating whether is a prince</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.CheckIsHerald">
            <summary>
            Check to see if the PlayerCharacter is a herald
            </summary>
            <returns>bool indicating whether is a herald</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.CheckIsSysAdmin">
            <summary>
            Check to see if the PlayerCharacter is a sysAdmin
            </summary>
            <returns>bool indicating whether is a sysAdmin</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetHomeFief">
            <summary>
            Returns the PlayerCharacter's home fief
            </summary>
            <returns>The home fief</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetAncestralHome">
            <summary>
            Returns the PlayerCharacter's ancestral home fief
            </summary>
            <returns>The ancestral home fief</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.TransferTitle(JominiEngine.Character,JominiEngine.Place)">
            <summary>
            Transfers the specified title to the specified character
            </summary>
            <param name="newTitleHolder">The new title holder</param>
            <param name="titlePlace">The place to which the title refers</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GrantTitle(JominiEngine.Character,JominiEngine.Place,JominiEngine.ProtoMessage@)">
            <summary>
            Transfers the title of a fief or province to another character
            </summary>
            <remarks>
            Predicate: assumes newHolder is male
            Predicate: assumes newHolder age 14 or over 
            </remarks>
            <returns>bool indicating success</returns>
            <param name="newHolder">The character receiving the title</param>
            <param name="titlePlace">The place to which the title refers</param>
            <param name="result">The result of attempting to grant</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetMyPopulation">
            <summary>
            Gets the total population of fiefs governed by the PlayerCharacter
            </summary>
            <returns>int containing total population</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetPopulationPercentage">
            <summary>
            Gets the percentage of population in the game governed by the PlayerCharacter
            </summary>
            <returns>double containing percentage of population governed</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetFiefsPercentage">
            <summary>
            Gets the percentage of total fiefs in the game owned by the PlayerCharacter
            </summary>
            <returns>double containing percentage of total fiefs owned</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetMoneyPercentage">
            <summary>
            Gets the percentage of total money in the game owned by the PlayerCharacter
            </summary>
            <returns>double containing percentage of total money owned</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.GetMyMoney">
            <summary>
            Calculates the total funds currently owned by the PlayerCharacter
            </summary>
            <returns>int containing the total funds</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.ElectNewArmyLeader">
            <summary>
            Elects a new leader from NPCs accompanying an army (upon death of PC leader)
            </summary>
            <returns>The new leader</returns>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.AddCaptive(JominiEngine.Character,JominiEngine.Fief)">
            <summary>
            Add a captive to a fief's gaol
            </summary>
            <param name="captive"></param>
            <param name="fief"></param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.ExecuteCaptive(JominiEngine.Character)">
            <summary>
            Kill the specified captive and update the captive's family/employer of the death
            </summary>
            <param name="captive">Captive to be executted</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.RansomCaptive(JominiEngine.Character)">
            <summary>
            Send a ransom to the family/employer of one of your captives
            </summary>
            <param name="captive">Captive to be ransomed</param>
        </member>
        <member name="M:JominiEngine.PlayerCharacter.ReleaseCaptive(JominiEngine.Character)">
            <summary>
            Releases one of your captives. The captive will immediately be transported to their employer/family's home fief
            </summary>
            <param name="captive">The captive to be released</param>
        </member>
        <member name="T:JominiEngine.NonPlayerCharacter">
            <summary>
            Class storing data on NonPlayerCharacter
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter.employer">
            <summary>
            Holds NPC's employer (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter.salary">
            <summary>
            Holds NPC's salary
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter.lastOffer">
            <summary>
            Holds last wage offer from individual PCs
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter.inEntourage">
            <summary>
            Denotes if in employer's entourage
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter.isHeir">
            <summary>
            Denotes if is player's heir
            </summary>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.#ctor(System.String,System.String,System.String,System.Tuple{System.UInt32,System.Byte},System.Boolean,JominiEngine.Nationality,System.Boolean,System.Double,System.Double,System.Collections.Generic.Queue{JominiEngine.Fief},JominiEngine.Language,System.Double,System.Double,System.Double,System.Double,System.Tuple{JominiEngine.Trait,System.Int32}[],System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.UInt32,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,JominiEngine.Ailment},JominiEngine.Fief,System.String,System.String)">
            <summary>
            Constructor for NonPlayerCharacter
            </summary>
            <param name="empl">String holding NPC's employer (charID)</param>
            <param name="sal">string holding NPC's wage</param>
            <param name="inEnt">bool denoting if in employer's entourage</param>
            <param name="isH">bool denoting if is player's heir</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.#ctor">
            <summary>
            Constructor for NonPlayerCharacter taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.#ctor(JominiEngine.NonPlayerCharacter_Serialised)">
            <summary>
            Constructor for NonPlayerCharacter using NonPlayerCharacter_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="npcs">NonPlayerCharacter_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.#ctor(JominiEngine.NonPlayerCharacter)">
            <summary>
            Constructor for NonPlayerCharacter using NonPlayerCharacter object,
            for use when respawning deceased NPCs
            </summary>
            <param name="npc">NonPlayerCharacter object to use as source</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.DisplayNonPlayerCharacter(JominiEngine.Character)">
            <summary>
            Retrieves NonPlayerCharacter-specific information for Character display
            </summary>
            <returns>String containing information to display</returns>
            <param name="observer">Character who is viewing this character's information</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.setEntourage(System.Boolean)">
            <summary>
            Sets entourage value
            </summary>
            <param name="inEntourage"></param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.removeSelfFromEntourage">
            <summary>
            Removes character from entourage
            </summary>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.ChecksForHeir(JominiEngine.PlayerCharacter,JominiEngine.ProtoMessage@)">
            <summary>
            Performs conditional checks prior to assigning the NonPlayerCharacter as heir
            </summary>
            <returns>bool indicating NonPlayerCharacter's suitability as heir</returns>
            <param name="pc">The PlayerCharacter who is choosing the heir</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.CalcFamilyAllowance(System.String)">
            <summary>
            Calculates the family allowance of a family NPC, based on age and function
            </summary>
            <returns>uint containing family allowance</returns>
            <param name="func">NPC's function</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.GetFunction(JominiEngine.PlayerCharacter)">
            <summary>
            Derives NPC function
            </summary>
            <returns>String containing NPC function</returns>
            <param name="pc">PlayerCharacter with whom NPC has relationship</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.GetResponsibilities(JominiEngine.PlayerCharacter)">
            <summary>
            Gets an NPC's employment responsibilities
            </summary>
            <returns>String containing NPC responsibilities</returns>
            <param name="pc">PlayerCharacter by whom NPC is employed</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.HasBabyName(System.Byte)">
            <summary>
            Checks if recently born NPC still needs to be named
            </summary>
            <returns>bool indicating whether NPC needs naming</returns>
            <param name="age">NPC age to check for</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.CalcSalary_BaseOnCurrent">
            <summary>
            Calculates the potential salary (per season) for the NonPlayerCharacter, based on his current salary
            </summary>
            <returns>double containing salary</returns>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.CalcSalary_BaseOnTraits">
            <summary>
            Calculates the potential salary (per season) for the NonPlayerCharacter, based on his traits
            </summary>
            <returns>uint containing salary</returns>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.CalcSalary(JominiEngine.PlayerCharacter)">
            <summary>
            Gets the potential salary (per season) for the NonPlayerCharacter,
            taking into account the stature of the hiring PlayerCharacter
            </summary>
            <returns>uint containing salary</returns>
            <param name="hiringPlayer">Hiring player</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.GetHeadOfFamily">
            <summary>
            Gets the character's head of family
            </summary>
            <returns>The head of family or null</returns>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.GetKingdom">
            <summary>
            Gets character's kingdom
            </summary>
            <returns>The kingdom</returns>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.GetKing">
            <summary>
            Gets character's king
            </summary>
            <returns>The king</returns>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.GetQueen">
            <summary>
            Gets character's queen
            </summary>
            <returns>The queen</returns>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.GetEmployer">
            <summary>
            Gets the character's employer
            </summary>
            <returns>The employer or null</returns>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter.CheckNeedsNaming">
            <summary>
            Checks to see if the character needs to be named and, if so, assigns regent's first name
            </summary>
        </member>
        <member name="T:JominiEngine.Character_Serialised">
            <summary>
            Class used to convert Character to/from serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.charID">
            <summary>
            Holds character ID
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.firstName">
            <summary>
            Holds character's first name
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.familyName">
            <summary>
            Holds character's family name
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.birthDate">
            <summary>
            Tuple holding character's year and season of birth
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.isMale">
            <summary>
            Holds if character male
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.nationality">
            <summary>
            Holds character nationality (ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.isAlive">
            <summary>
            bool indicating whether character is alive
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.maxHealth">
            <summary>
            Holds character maximum health
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.virility">
            <summary>
            Holds character virility
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.goTo">
            <summary>
            Queue of Fiefs (fiefID) to auto-travel to
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.language">
            <summary>
            Holds character language and dialect
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.days">
            <summary>
            Holds character's remaining days in season
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.statureModifier">
            <summary>
            Holds character's stature
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.management">
            <summary>
            Holds character's management rating
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.combat">
            <summary>
            Holds character's combat rating
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.traits">
            <summary>
            Array holding character's traits (ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.inKeep">
            <summary>
            bool indicating if character is in the keep
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.isPregnant">
            <summary>
            Holds character pregnancy status
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.location">
            <summary>
            Holds current location (Fief ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.spouse">
            <summary>
            Holds spouse (Character ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.father">
            <summary>
            Holds father (Character ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.mother">
            <summary>
            Holds mother (Character ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.familyID">
            <summary>
            Holds charID of head of family with which character associated
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.fiancee">
            <summary>
            Holds chaacter's fiancee (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.myTitles">
            <summary>
            Holds character's titles (fiefIDs)
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.armyID">
            <summary>
            Holds armyID of army character is leading
            </summary>
        </member>
        <member name="F:JominiEngine.Character_Serialised.ailments">
            <summary>
            Holds ailments effecting character's health
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.captorID">
            <summary>
            Holds captor charID
            </summary>
        </member>
        <member name="P:JominiEngine.Character_Serialised.ransom">
            <summary>
            Holds jentry id of ransom demand
            </summary>
        </member>
        <member name="M:JominiEngine.Character_Serialised.#ctor(JominiEngine.PlayerCharacter,JominiEngine.NonPlayerCharacter)">
            <summary>
            Constructor for Character_Serialised
            </summary>
            <param name="pc">PlayerCharacter object to use as source</param>
            <param name="npc">NonPlayerCharacter object to use as source</param>
        </member>
        <member name="M:JominiEngine.Character_Serialised.#ctor(System.String,System.String,System.String,System.Tuple{System.UInt32,System.Byte},System.Boolean,System.String,System.Boolean,System.Double,System.Double,System.Collections.Generic.List{System.String},System.String,System.Double,System.Double,System.Double,System.Double,System.Tuple{System.String,System.Int32}[],System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,JominiEngine.Ailment},System.String,System.String)">
            <summary>
            Constructor for Character_Serialised taking seperate values.
            For creating Character_Serialised from CSV file.
            </summary>
            <param name="id">string holding character ID</param>
            <param name="firstNam">String holding character's first name</param>
            <param name="famNam">String holding character's family name</param>
            <param name="dob">Tuple(uint, byte) holding character's year and season of birth</param>
            <param name="isM">bool holding if character male</param>
            <param name="nat">string holding Character's Nationality (id)</param>
            <param name="alive">bool indicating whether character is alive</param>
            <param name="mxHea">Double holding character maximum health</param>
            <param name="vir">Double holding character virility rating</param>
            <param name="go">Queue (string) of Fiefs to auto-travel (id)</param>
            <param name="lang">string holding Language (id)</param>
            <param name="day">double holding character remaining days in season</param>
            <param name="stat">Double holding character stature rating</param>
            <param name="mngmnt">Double holding character management rating</param>
            <param name="cbt">Double holding character combat rating</param>
            <param name="trt">string array containing character's traits (id)</param>
            <param name="inK">bool indicating if character is in the keep</param>
            <param name="preg">bool holding character pregnancy status</param>
            <param name="famID">String holding charID of head of family with which character associated</param>
            <param name="sp">String holding spouse (charID)</param>
            <param name="fath">String holding father (charID)</param>
            <param name="moth">String holding mother (charID)</param>
            <param name="fia">string holding fiancee (charID)</param>
            <param name="loc">string holding current location (id)</param>
            <param name="myTi">List holding character's titles (fiefIDs)</param>
            <param name="aID">String holding armyID of army character is leading</param>
            <param name="ails">Dictionary (string, Ailment) holding ailments effecting character's health</param>
        </member>
        <member name="T:JominiEngine.PlayerCharacter_Serialised">
            <summary>
            Class used to convert PlayerCharacter to/from serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter_Serialised.isOutlawed">
            <summary>
            Holds character outlawed status
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter_Serialised.purse">
            <summary>
            Holds character's finances
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter_Serialised.myNPCs">
            <summary>
            Holds character's employees and family (charID)
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter_Serialised.ownedFiefs">
            <summary>
            Holds character's owned fiefs (id)
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter_Serialised.ownedProvinces">
            <summary>
            Holds character's owned provinces (id)
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter_Serialised.homeFief">
            <summary>
            Holds character's home fief (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter_Serialised.ancestralHomeFief">
            <summary>
            Holds character's ancestral home fief (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.PlayerCharacter_Serialised.playerID">
            <summary>
            Holds ID of player who is currently playing this PlayerCharacter
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter_Serialised.myArmies">
            <summary>
            Holds character's armies (Army objects)
            </summary>
        </member>
        <member name="F:JominiEngine.PlayerCharacter_Serialised.mySieges">
            <summary>
            Holds character's sieges (Siege objects)
            </summary>
        </member>
        <member name="M:JominiEngine.PlayerCharacter_Serialised.#ctor(JominiEngine.PlayerCharacter)">
            <summary>
            Constructor for PlayerCharacter_Serialised
            </summary>
            <param name="pc">PlayerCharacter object to use as source</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.PlayerCharacter_Serialised.#ctor(System.String,System.String,System.String,System.Tuple{System.UInt32,System.Byte},System.Boolean,System.String,System.Boolean,System.Double,System.Double,System.Collections.Generic.List{System.String},System.String,System.Double,System.Double,System.Double,System.Double,System.Tuple{System.String,System.Int32}[],System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.UInt32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,JominiEngine.Ailment},System.String,System.String,System.String)" -->
        <member name="M:JominiEngine.PlayerCharacter_Serialised.#ctor">
            <summary>
            Constructor for PlayerCharacter_Serialised taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.NonPlayerCharacter_Serialised">
            <summary>
            Class used to convert NonPlayerCharacter to/from serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter_Serialised.employer">
            <summary>
            Holds NPC's employer (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter_Serialised.salary">
            <summary>
            Holds NPC's wage
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter_Serialised.lastOffer">
            <summary>
            Holds last wage offer from individual PCs
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter_Serialised.inEntourage">
            <summary>
            Denotes if in employer's entourage
            </summary>
        </member>
        <member name="P:JominiEngine.NonPlayerCharacter_Serialised.isHeir">
            <summary>
            Denotes if is player's heir
            </summary>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter_Serialised.#ctor(JominiEngine.NonPlayerCharacter)">
            <summary>
            Constructor for NonPlayerCharacter_Serialised
            </summary>
            <param name="npc">NonPlayerCharacter object to use as source</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter_Serialised.#ctor(System.String,System.String,System.String,System.Tuple{System.UInt32,System.Byte},System.Boolean,System.String,System.Boolean,System.Double,System.Double,System.Collections.Generic.List{System.String},System.String,System.Double,System.Double,System.Double,System.Double,System.Tuple{System.String,System.Int32}[],System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.UInt32,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,JominiEngine.Ailment},System.String,System.String,System.String)">
            <summary>
            Constructor for NonPlayerCharacter_Serialised taking seperate values.
            For creating NonPlayerCharacter_Serialised from CSV file.
            </summary>
            <param name="empl">String holding NPC's employer (charID)</param>
            <param name="sal">string holding NPC's wage</param>
            <param name="inEnt">bool denoting if in employer's entourage</param>
            <param name="isH">bool denoting if is player's heir</param>
        </member>
        <member name="M:JominiEngine.NonPlayerCharacter_Serialised.#ctor">
            <summary>
            Constructor for NonPlayerCharacter_Serialised taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.Client">
            <summary>
            Represents a client, their details and the information about their objects
            </summary>
        </member>
        <member name="P:JominiEngine.Client.conn">
            <summary>
            Holds the client's connection
            </summary>
        </member>
        <member name="P:JominiEngine.Client.username">
            <summary>
            The client's username, aka playerID
            </summary>
        </member>
        <member name="P:JominiEngine.Client.myPlayerCharacter">
            <summary>
            Holds PlayerCharacter associated with the player using this client
            </summary>
        </member>
        <member name="P:JominiEngine.Client.activeChar">
            <summary>
            Holds Character to view in UI
            </summary>
        </member>
        <member name="P:JominiEngine.Client.fiefToView">
            <summary>
            Holds Fief to view in UI
            </summary>
        </member>
        <member name="P:JominiEngine.Client.provinceToView">
            <summary>
            Holds Province to view in UI
            </summary>
        </member>
        <member name="P:JominiEngine.Client.armyToView">
            <summary>
            Holds Army to view in UI
            </summary>
        </member>
        <member name="P:JominiEngine.Client.siegeToView">
            <summary>
            Holds Siege to view in UI
            </summary>
        </member>
        <member name="F:JominiEngine.Client.myPastEvents">
            <summary>
            Holds past events
            </summary>
        </member>
        <member name="F:JominiEngine.Client.eventSetToView">
            <summary>
            Holds current set of events being displayed in UI
            </summary>
        </member>
        <member name="P:JominiEngine.Client.jEntryToView">
            <summary>
            Holds index position of currently displayed entry in eventSetToView
            </summary>
        </member>
        <member name="P:JominiEngine.Client.jEntryMax">
            <summary>
            Holds highest index position in eventSetToView
            </summary>
        </member>
        <member name="F:JominiEngine.Client.showMessages">
            <summary>
            Holds bool indicating whether or not to display popup messages
            </summary>
        </member>
        <member name="F:JominiEngine.Client.showDebugMessages">
            <summary>
            Holds bool indicating whether or not to display popup debug messages
            </summary>
        </member>
        <member name="F:JominiEngine.Client.alg">
            <summary>
            Holds the algorithm to be used during encryption and decryption. Alg is generated using the peer and a key obtained from the client 
            </summary>
        </member>
        <member name="M:JominiEngine.Client.#ctor(System.String,System.String)">
            <summary>
            Create a new client object
            </summary>
            <param name="user">username</param>
            <param name="pcID">PlayerCharacterID</param>
        </member>
        <member name="M:JominiEngine.Client.Update(JominiEngine.DisplayMessages,System.String[])">
            <summary>
            Updates the client
            </summary>
            <param name="message">The message code to send</param>
            <param name="fields">Additional information to add to the message</param>
        </member>
        <member name="M:JominiEngine.Client.Update(JominiEngine.ProtoMessage)">
            <summary>
            Send an update to the client- used when the message to be sent requires additional information other than just a response code and some strings
            </summary>
            <param name="message">Message to be sent- can contain any number of details</param>
        </member>
        <member name="M:JominiEngine.Client.Equals(JominiEngine.Client)">
            <summary>
            Two clients are equal if their usernames are the same
            </summary>
            <param name="other">The client to be compared</param>
            <returns>True if the usernames match, false if otherwise</returns>
        </member>
        <member name="T:JominiEngine.Client_Serialized">
            <summary>
            Serialised version of Client for used in reading/writing to database
            </summary>
        </member>
        <member name="T:JominiEngine.ClientSerializer">
            <summary>
            Serializes several server-side objects into a a format more appropriate for client-side
            Any data which does not change and will not give players an unfair advantage should be serialized and sent to the client in order to reduce the amount of data transferred over network
            </summary>
        </member>
        <member name="M:JominiEngine.CSVimport.NewGameFromCSV(System.String,System.String,System.UInt32)">
            <summary>
            Creates game objects necessary for a new game, mainly using data imported from a CSV file
            </summary>
            <param name="objectDataFile">Name of file containing game object CSV data</param>
            <param name="mapDataFile">Name of file containing map CSV data</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates game objects using data imported from a CSV file and writes them to the database
            </summary>
            <returns>bool indicating success state</returns>
            <param name="filename">The name of the CSV file</param>
            <param name="bucketID">The name of the database bucket in which to store the game objects</param>
            <param name="synch">bool indicating whether or not to synch the game objects' properties</param>
            <param name="toDatabase">bool indicating whether or not to save the game objects to database or game</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Fief(System.String[],System.Int32)">
            <summary>
            Creates a Fief_Serialised object using data in a string array
            </summary>
            <returns>Fief_Serialised object</returns>
            <param name="fiefData">string[] holding source data</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Prov(System.String[],System.Int32)">
            <summary>
            Creates a Province_Serialised object using data in a string array
            </summary>
            <returns>Province_Serialised object</returns>
            <param name="provData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Kingdom(System.String[],System.Int32)">
            <summary>
            Creates a Kingdom_Serialised object using data in a string array
            </summary>
            <returns>Kingdom_Serialised object</returns>
            <param name="kingData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_PC(System.String[],System.Int32)">
            <summary>
            Creates a PlayerCharacter_Serialised object using data in a string array
            </summary>
            <returns>PlayerCharacter_Serialised object</returns>
            <param name="pcData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.importFromCSV_NPC(System.String[],System.Int32)">
            <summary>
            Creates a NonPlayerCharacter_Serialised object using data in a string array
            </summary>
            <returns>NonPlayerCharacter_Serialised object</returns>
            <param name="npcData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Trait(System.String[],System.Int32)">
            <summary>
            Creates a Trait object using data in a string array
            </summary>
            <returns>Trait object</returns>
            <param name="traitData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Army(System.String[],System.Int32)">
            <summary>
            Creates a Army object using data in a string array
            </summary>
            <returns>Army object</returns>
            <param name="armyData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Language(System.String[],System.Int32)">
            <summary>
            Creates a Language_Serialised object using data in a string array
            </summary>
            <returns>Language_Serialised object</returns>
            <param name="langData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_BaseLanguage(System.String[],System.Int32)">
            <summary>
            Creates a BaseLanguage object using data in a string array
            </summary>
            <returns>BaseLanguage object</returns>
            <param name="baseLangData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Nationality(System.String[],System.Int32)">
            <summary>
            Creates a Nationality object using data in a string array
            </summary>
            <returns>Nationality object</returns>
            <param name="natData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Rank(System.String[],System.Int32)">
            <summary>
            Creates a Rank object using data in a string array
            </summary>
            <returns>Rank object</returns>
            <param name="rankData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Position(System.String[],System.Int32)">
            <summary>
            Creates a Position_Serialised object using data in a string array
            </summary>
            <returns>Position_Serialised object</returns>
            <param name="posData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Siege(System.String[],System.Int32)">
            <summary>
            Creates a Siege object using data in a string array
            </summary>
            <returns>Siege object</returns>
            <param name="siegeData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.ImportFromCSV_Terrain(System.String[],System.Int32)">
            <summary>
            Creates a Terrain object using data in a string array
            </summary>
            <returns>Terrain object</returns>
            <param name="terrData">string[] holding source data</param>
            <param name="lineNum">Line number in source file</param>
        </member>
        <member name="M:JominiEngine.CSVimport.SynchGameObjectCollections(System.Collections.Generic.Dictionary{System.String,JominiEngine.Fief_Serialised},System.Collections.Generic.Dictionary{System.String,JominiEngine.PlayerCharacter_Serialised},System.Collections.Generic.Dictionary{System.String,JominiEngine.NonPlayerCharacter_Serialised},System.Collections.Generic.Dictionary{System.String,JominiEngine.Province_Serialised},System.Collections.Generic.Dictionary{System.String,JominiEngine.Kingdom_Serialised},System.Collections.Generic.Dictionary{System.String,JominiEngine.Siege},System.Collections.Generic.Dictionary{System.String,JominiEngine.Army},System.String,System.Boolean)">
            <summary>
            Uses individual game objects to populate variable-length collections within other game objects
            </summary>
            <param name="fiefMasterList">Fief_Serialised objects</param>
            <param name="pcMasterList">PlayerCharacter_Serialised objects</param>
            <param name="npcMasterList">NonPlayerCharacter_Serialised objects</param>
            <param name="provinceMasterList">Province_Serialised objects</param>
            <param name="kingdomMasterList">Kingdom_Serialised objects</param>
            <param name="siegeMasterList">Siege objects</param>
            <param name="armyMasterList">Army objects</param>
            <param name="bucketID">The name of the database bucket in which to store the game objects</param>
            <param name="toDatabase">bool indicating whether or not to save the game objects to database or game</param>
        </member>
        <member name="M:JominiEngine.CSVimport.CreateMapEdgesFromCSV(System.String,System.String,System.Boolean)">
            <summary>
            Creates a map edges collection using data imported from a CSV file and either writes it to the database
            or creates a game map
            </summary>
            <returns>bool indicating success state</returns>
            <param name="filename">The name of the CSV file</param>
            <param name="bucketID">The name of the database bucket in which to store the game objects</param>
            <param name="toDatabase">bool indicating whether or not to save the game objects to database or game</param>
        </member>
        <member name="M:JominiEngine.CSVimport.CreateMapEdgesList(System.String[0:,0:],System.Collections.Generic.List{System.String[]})">
            <summary>
            Creates list of serialised map edges
            </summary>
            <returns>List containing map edges</returns>
            <param name="mapArray">string[,] containing main map data</param>
            <param name="customLinks">List(string) containing custom hex links (optional)</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseReadAll(System.String)">
            <summary>
            Reads all objects for a particular game from database
            </summary>
            <param name="gameID">ID of game (database bucket)</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_keyLists(System.String)">
            <summary>
            Reads all key lists from the database
            </summary>
            <param name="gameID">Game for which key lists to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_clock(System.String,System.String)">
            <summary>
            Reads a GameClock object from the database
            </summary>
            <returns>GameClock object</returns>
            <param name="gameID">Game for which clock to be retrieved</param>
            <param name="clockID">ID of clock to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_dictStringUint(System.String,System.String)">
            <summary>
            Reads a Dictionary(string, uint[]) from the database
            </summary>
            <returns>Dictionary(string, uint[]) object</returns>
            <param name="gameID">Game for which Dictionary to be retrieved</param>
            <param name="dictID">ID of Dictionary to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_dictStringDouble(System.String,System.String)">
            <summary>
            Reads a Dictionary(string, double[]) from the database
            </summary>
            <returns>Dictionary(string, double[]) object</returns>
            <param name="gameID">Game for which Dictionary to be retrieved</param>
            <param name="dictID">ID of Dictionary to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_dictIntString(System.String,System.String)">
            <summary>
            Reads a Dictionary(uint, string) from the database
            </summary>
            <returns>Dictionary(uint, string) object</returns>
            <param name="gameID">Game for which Dictionary to be retrieved</param>
            <param name="dictID">ID of Dictionary to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_dictStringByte(System.String,System.String)">
            <summary>
            Reads a Dictionary(string, byte) from the database
            </summary>
            <returns>Dictionary(string, byte) object</returns>
            <param name="gameID">Game for which Dictionary to be retrieved</param>
            <param name="dictID">ID of Dictionary to be retrieved</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.DatabaseRead.JentryPriorities_deserialise(System.Collections.Generic.Dictionary{System.String,System.Byte})" -->
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_dictStringOwnCh(System.String,System.String)">
            <summary>
            Reads a Dictionary(string, OwnershipChallenge) from the database
            </summary>
            <returns>Dictionary(string, OwnershipChallenge) object</returns>
            <param name="gameID">Game for which Dictionary to be retrieved</param>
            <param name="dictID">ID of Dictionary to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_newIDs(System.String,System.String)">
            <summary>
            Reads a newID variable from the database
            </summary>
            <returns>uint</returns>
            <param name="gameID">Game for which newID variable to be retrieved</param>
            <param name="clockID">newID variable to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_journal(System.String,System.String)">
            <summary>
            Reads a Journal object from the database
            </summary>
            <returns>Journal object</returns>
            <param name="gameID">Game for which Journal to be retrieved</param>
            <param name="journalID">ID of Journal to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_victoryData(System.String,System.String)">
            <summary>
            Reads a VictoryData object from the database
            </summary>
            <returns>VictoryData object</returns>
            <param name="gameID">Game for which VictoryData to be retrieved</param>
            <param name="vicDataID">ID of VictoryData to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_trait(System.String,System.String)">
            <summary>
            Reads a Trait object from the database
            </summary>
            <returns>Trait object</returns>
            <param name="gameID">Game for which trait to be retrieved</param>
            <param name="traitID">ID of trait to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_baseLanguage(System.String,System.String)">
            <summary>
            Reads a BaseLanguage object from the database
            </summary>
            <returns>BaseLanguage object</returns>
            <param name="gameID">Game for which BaseLanguage to be retrieved</param>
            <param name="bLangID">ID of Language to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_language(System.String,System.String)">
            <summary>
            Reads a Language object from the database
            </summary>
            <returns>Language object</returns>
            <param name="gameID">Game for which Language to be retrieved</param>
            <param name="langID">ID of Language to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.Language_deserialise(JominiEngine.Language_Serialised)">
            <summary>
            Deserialises a Language object
            </summary>
            <returns>Language object</returns>
            <param name="ls">Language_Serialised object to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_nationality(System.String,System.String)">
            <summary>
            Reads a Nationality object from the database
            </summary>
            <returns>Nationality object</returns>
            <param name="gameID">Game for which Nationality to be retrieved</param>
            <param name="natID">ID of Nationality to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_rank(System.String,System.String)">
            <summary>
            Reads a Rank object from the database
            </summary>
            <returns>Rank object</returns>
            <param name="gameID">Game for which Rank to be retrieved</param>
            <param name="rankID">ID of Rank to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_position(System.String,System.String)">
            <summary>
            Reads a Position object from the database
            </summary>
            <returns>Position object</returns>
            <param name="gameID">Game for which Position to be retrieved</param>
            <param name="posID">ID of Position to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.Position_deserialise(JominiEngine.Position_Serialised)">
            <summary>
            Deserialises a Position object
            </summary>
            <returns>Position object</returns>
            <param name="ps">Position_Serialised object to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_Siege(System.String,System.String)">
            <summary>
            Reads a Siege object from the database
            </summary>
            <returns>Siege object</returns>
            <param name="gameID">Game for which Siege to be retrieved</param>
            <param name="siegeID">ID of Siege to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_Army(System.String,System.String)">
            <summary>
            Reads an Army object from the database
            </summary>
            <returns>Army object</returns>
            <param name="gameID">Game for which Army to be retrieved</param>
            <param name="armyID">ID of Army to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_NPC(System.String,System.String)">
            <summary>
            Reads an NPC object from the database
            </summary>
            <returns>NonPlayerCharacter object</returns>
            <param name="gameID">Game for which NPC to be retrieved</param>
            <param name="npcID">ID of NPC to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.NPC_deserialise(JominiEngine.NonPlayerCharacter_Serialised)">
            <summary>
            Deserialises a NonPlayerCharacter object
            </summary>
            <returns>NonPlayerCharacter object</returns>
            <param name="npcs">NonPlayerCharacter_Serialised object to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_PC(System.String,System.String)">
            <summary>
            Reads a PC object from the database
            </summary>
            <returns>PlayerCharacter object</returns>
            <param name="gameID">Game for which PC to be retrieved</param>
            <param name="pcID">ID of PC to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.PC_deserialise(JominiEngine.PlayerCharacter_Serialised)">
            <summary>
            Deserialises a PlayerCharacter object
            </summary>
            <returns>PlayerCharacter object</returns>
            <param name="pcs">PlayerCharacter_Serialised object to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_Kingdom(System.String,System.String)">
            <summary>
            Reads a Kingdom object from the database
            </summary>
            <returns>Kingdom object</returns>
            <param name="gameID">Game for which Kingdom to be retrieved</param>
            <param name="kingID">ID of Kingdom to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.Kingdom_deserialise(JominiEngine.Kingdom_Serialised)">
            <summary>
            Deserialises a Kingdom object
            </summary>
            <returns>Kingdom object</returns>
            <param name="ks">Kingdom_Serialised to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_Province(System.String,System.String)">
            <summary>
            Reads a Province object from the database
            </summary>
            <returns>Province object</returns>
            <param name="gameID">Game for which Province to be retrieved</param>
            <param name="provID">ID of Province to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.Province_deserialise(JominiEngine.Province_Serialised)">
            <summary>
            Deserialises a Province object
            </summary>
            <returns>Province object</returns>
            <param name="ps">Province_Serialised to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_terrain(System.String,System.String)">
            <summary>
            Reads a Terrain object from the database
            </summary>
            <returns>Terrain object</returns>
            <param name="gameID">Game for which Terrain to be retrieved</param>
            <param name="terrID">ID of Terrain to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_Fief(System.String,System.String)">
            <summary>
            Reads a Fief object from the database
            </summary>
            <returns>Fief object</returns>
            <param name="gameID">Game for which Fief to be retrieved</param>
            <param name="fiefID">ID of Fief to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.Fief_deserialise(JominiEngine.Fief_Serialised)">
            <summary>
            Deserialises a Fief object
            Also inserts Fief into appropriate PlayerCharacter and NonPlayerCharacter objects.
            </summary>
            <returns>Fief object</returns>
            <param name="fs">Fief_Serialised object to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.Populate_goTo(JominiEngine.Character_Serialised)">
            <summary>
            Inserts Fief objects into a Character's goTo Queue
            </summary>
            <returns>bool indicating success</returns>
            <param name="cs">Character_Serialised containing goTo Queue</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_PcVariable(System.String,System.String)">
            <summary>
            Reads a PlayerCharacter variable from the database
            </summary>
            <returns>PlayerCharacter object</returns>
            <param name="gameID">Game for which PlayerCharacter variable to be retrieved</param>
            <param name="charVarID">ID of PlayerCharacter variable to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_bool(System.String,System.String)">
            <summary>
            Reads a bool variable from the database
            </summary>
            <returns>bool variable</returns>
            <param name="gameID">Game for which bool variable to be retrieved</param>
            <param name="boolID">ID of bool variable to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.DatabaseRead_map(System.String,System.String)">
            <summary>
            Reads a map edge collection from the database and uses it to create a HexMapGraph
            </summary>
            <returns>HexMapGraph object</returns>
            <param name="gameID">Game for which map to be created</param>
            <param name="mapEdgesID">ID of map edges collection to be retrieved</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.EdgeCollection_deserialise(System.Collections.Generic.List{QuickGraph.TaggedEdge{System.String,System.String}})">
            <summary>
            Converts serialised edges collection into HexMapGraph edges collection
            </summary>
            <returns>HexMapGraph edges collection</returns>
            <param name="edgesIn">'String-ified' edges collection to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseRead.EdgeString_deserialise(QuickGraph.TaggedEdge{System.String,System.String})">
            <summary>
            Converts serialised edge into HexMapGraph edge
            </summary>
            <returns>HexMapGraph edge</returns>
            <param name="te">'String-ified' edge to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWriteAll(System.String)">
            <summary>
            Writes all game objects to the database
            </summary>
            <param name="gameID">ID of game (used for database bucket)</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.DatabaseWrite.DatabaseWrite_KeyList``1(System.String,System.String,System.Collections.Generic.List{``0})" -->
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Clock(System.String,JominiEngine.GameClock)">
            <summary>
            Writes a GameClock object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="gc">GameClock to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Dictionary``1(System.String,System.String,``0)">
            <summary>
            Writes a Dictionary object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="key">Database key to use</param>
            <param name="dictionary">Dictionary to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.JentryPriorities_serialise(System.Collections.Generic.Dictionary{System.String[],System.Byte})">
            <summary>
            Serialises jEntryPriorities Dictionary
            </summary>
            <returns>Dictionary(string, byte) for database storage</returns>
            <param name="dictToConvert">The Dictionary to convert</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Journal(System.String,System.String,JominiEngine.Journal)">
            <summary>
            Writes a Journal object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="key">Database key to use</param>
            <param name="journal">Journal to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_String(System.String,System.String,System.String)">
            <summary>
            Writes a string variable to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="key">Database key to use</param>
            <param name="pcID">string to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_newID(System.String,System.String,System.UInt32)">
            <summary>
            Writes a newID variable to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="key">Database key to use</param>
            <param name="newID">newID to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Bool(System.String,System.String,System.Boolean)">
            <summary>
            Writes a bool variable to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="key">Database key to use</param>
            <param name="thisBool">bool to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Trait(System.String,JominiEngine.Trait)">
            <summary>
            Writes aTtrait object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="t">Trait to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_BaseLanguage(System.String,JominiEngine.BaseLanguage)">
            <summary>
            Writes a BaseLanguage object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="bl">BaseLanguage to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Language(System.String,JominiEngine.Language,JominiEngine.Language_Serialised)">
            <summary>
            Writes a Language or Language_Serialised object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="l">Language to write</param>
            <param name="ls">Language_Serialised to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.Language_serialise(JominiEngine.Language)">
            <summary>
            serialises a Language object
            </summary>
            <returns>Language_Serialised object</returns>
            <param name="l">Language to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Nationality(System.String,JominiEngine.Nationality)">
            <summary>
            Writes a Nationality object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="n">Nationality to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Rank(System.String,JominiEngine.Rank)">
            <summary>
            Writes a Rank object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="r">Rank to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Position(System.String,JominiEngine.Position,JominiEngine.Position_Serialised)">
            <summary>
            Writes a Position or Position_Serialised object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="p">Position to write</param>
            <param name="ps">Position_Serialised to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.Position_serialise(JominiEngine.Position)">
            <summary>
            serialises a Position object
            </summary>
            <returns>Position_Serialised object</returns>
            <param name="p">Position to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_NPC(System.String,JominiEngine.NonPlayerCharacter,JominiEngine.NonPlayerCharacter_Serialised)">
            <summary>
            Writes a NonPlayerCharacter or NonPlayerCharacter_Serialised object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="npc">NonPlayerCharacter to write</param>
            <param name="npcs">NonPlayerCharacter_Serialised to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.NPC_serialise(JominiEngine.NonPlayerCharacter)">
            <summary>
            Serialises a NonPlayerCharacter object
            </summary>
            <returns>NonPlayerCharacter_Serialised object</returns>
            <param name="npc">NonPlayerCharacter to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_PC(System.String,JominiEngine.PlayerCharacter,JominiEngine.PlayerCharacter_Serialised)">
            <summary>
            Writes a PlayerCharacter or PlayerCharacter_Serialised object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="pc">PlayerCharacter to write</param>
            <param name="pcs">PlayerCharacter_Serialised to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.PC_serialise(JominiEngine.PlayerCharacter)">
            <summary>
            Serialises a PlayerCharacter object
            </summary>
            <returns>PlayerCharacter_Serialised object</returns>
            <param name="pc">PlayerCharacter to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Kingdom(System.String,JominiEngine.Kingdom,JominiEngine.Kingdom_Serialised)">
            <summary>
            Writes a Kingdom or Kingdom_Serialised object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="k">Kingdom to write</param>
            <param name="ks">Kingdom_Serialised to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.Kingdom_serialise(JominiEngine.Kingdom)">
            <summary>
            Serialises a Kingdom object
            </summary>
            <returns>Kingdom_Serialised object</returns>
            <param name="k">Kingdom to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Province(System.String,JominiEngine.Province,JominiEngine.Province_Serialised)">
            <summary>
            Writes a Province or Province_Serialised object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="p">Province to write</param>
            <param name="ps">Province_Serialised to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.Province_serialise(JominiEngine.Province)">
            <summary>
            Serialises a Province object
            </summary>
            <returns>Province_Serialised object</returns>
            <param name="p">Province to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Terrain(System.String,JominiEngine.Terrain)">
            <summary>
            Writes a Terrain object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="t">Terrain to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_VictoryData(System.String,JominiEngine.VictoryData)">
            <summary>
            Writes a VictoryData object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="vicDat">VictoryData to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Fief(System.String,JominiEngine.Fief,JominiEngine.Fief_Serialised)">
            <summary>
            Writes a Fief or Fief_Serialised object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="f">Fief to write</param>
            <param name="fs">Fief_Serialised to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.Fief_serialise(JominiEngine.Fief)">
            <summary>
            Serialises a Fief object
            </summary>
            <returns>Fief_Serialised object</returns>
            <param name="f">Fief to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Army(System.String,JominiEngine.Army)">
            <summary>
            Writes an Army object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="a">Army to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_Siege(System.String,JominiEngine.Siege)">
            <summary>
            Writes a Siege object to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="s">Siege to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.DatabaseWrite_MapEdges(System.String,JominiEngine.HexMapGraph,System.Collections.Generic.List{QuickGraph.TaggedEdge{System.String,System.String}})">
            <summary>
            Writes a HexMapGraph edges collection to the database
            </summary>
            <returns>bool indicating success</returns>
            <param name="gameID">Game (bucket) to write to</param>
            <param name="map">HexMapGraph containing edges collection to write</param>
            <param name="edges">Edges collection to write</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.EdgeCollection_serialise(System.Collections.Generic.List{QuickGraph.TaggedEdge{JominiEngine.Fief,System.String}})">
            <summary>
            Serialises HexMapGraph edges collection
            </summary>
            <returns>Serialised edges collection</returns>
            <param name="edgesIn">Edges collection to be converted</param>
        </member>
        <member name="M:JominiEngine.DatabaseWrite.EdgeFief_serialise(QuickGraph.TaggedEdge{JominiEngine.Fief,System.String})">
            <summary>
            Serialises HexMapGraph edge object
            </summary>
            <returns>Serialised edge</returns>
            <param name="te">HexMapGraph edge to be converted</param>
        </member>
        <member name="T:JominiEngine.Fief">
            <summary>
            Class storing data on fief
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.province">
            <summary>
            Holds fief's Province object
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.population">
            <summary>
            Holds fief population
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.fields">
            <summary>
            Holds fief field level
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.industry">
            <summary>
            Holds fief industry level
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.troops">
            <summary>
            Holds number of troops in fief
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.taxRate">
            <summary>
            Holds fief tax rate
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.taxRateNext">
            <summary>
            Holds fief tax rate (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.officialsSpendNext">
            <summary>
            Holds expenditure on officials (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.garrisonSpendNext">
            <summary>
            Holds expenditure on garrison (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.infrastructureSpendNext">
            <summary>
            Holds expenditure on infrastructure (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.keepSpendNext">
            <summary>
            Holds expenditure on keep (next season)
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.keyStatsCurrent">
            <summary>
            Holds key data for current season.
            0 = loyalty,
            1 = GDP,
            2 = tax rate,
            3 = official expenditure,
            4 = garrison expenditure,
            5 = infrastructure expenditure,
            6 = keep expenditure,
            7 = keep level,
            8 = income,
            9 = family expenses,
            10 = total expenses,
            11 = overlord taxes,
            12 = overlord tax rate,
            13 = bottom line
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.keyStatsPrevious">
            <summary>
            Holds key data for previous season
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.keepLevel">
            <summary>
            Holds fief keep level
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.loyalty">
            <summary>
            Holds fief loyalty
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.status">
            <summary>
            Holds fief status (calm, unrest, rebellion)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.language">
            <summary>
            Holds fief language and dialect
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.terrain">
            <summary>
            Holds terrain object
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.charactersInFief">
            <summary>
            Holds characters present in fief
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.gaol">
            <summary>
            Stores captives in this fief
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.barredCharacters">
            <summary>
            Holds characters banned from keep (charIDs)
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.barredNationalities">
            <summary>
            Holds nationalitie banned from keep (IDs)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.ancestralOwner">
            <summary>
            Holds fief ancestral owner (PlayerCharacter object)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.bailiff">
            <summary>
            Holds fief bailiff (Character object)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.bailiffDaysInFief">
            <summary>
            Number of days the bailiff has been resident in the fief (this season)
            </summary>
        </member>
        <member name="F:JominiEngine.Fief._treasury">
            <summary>
            Holds fief treasury
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.Treasury">
            <summary>
            Public accessor for the treasury- adjusting the treasury should be done with the "AdjustTreasury" method 
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.armies">
            <summary>
            Holds armies present in the fief (armyIDs)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.hasRecruited">
            <summary>
            Identifies if recruitment has occurred in the fief in the current season
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.isPillaged">
            <summary>
            Identifies if pillage has occurred in the fief in the current season
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.troopTransfers">
            <summary>
            Holds troop detachments in the fief awaiting transfer
            String[] contains from (charID), to (charID), troop numbers (each type), days left when detached
            </summary>
        </member>
        <member name="P:JominiEngine.Fief.siege">
            <summary>
            Siege (siegeID) of active siege
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.treasuryTransferLock">
            <summary>
            Create a new object to use as a treasury lock between transfers
            </summary>
        </member>
        <member name="F:JominiEngine.Fief.treasuryLock">
            <summary>
            Create lock for manipulating treasury
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Fief.#ctor(System.String,System.String,System.String,JominiEngine.PlayerCharacter,JominiEngine.Rank,JominiEngine.Province,System.Int32,System.Double,System.Double,System.UInt32,System.Double,System.Double,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double[],System.Double[],System.Double,System.Double,System.Char,JominiEngine.Language,JominiEngine.Terrain,System.Collections.Generic.List{JominiEngine.Character},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Double,System.Int32,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.Dictionary{System.String,JominiEngine.ProtoDetachment},System.Boolean,JominiEngine.PlayerCharacter,JominiEngine.Character,System.String)" -->
        <member name="M:JominiEngine.Fief.#ctor(JominiEngine.Fief_Serialised)">
            <summary>
            Constructor for Fief using Fief_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="fs">Fief_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Fief.#ctor">
            <summary>
            Constructor for Fief taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Fief.AdjustExpenditures(System.Double,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Adjusts the fief's tax rate and expenditure levels (officials, garrison, infrastructure, keep)
            </summary>
            <param name="tx">Proposed tax rate</param>
            <param name="off">Proposed officials expenditure</param>
            <param name="garr">Proposed garrison expenditure</param>
            <param name="infr">Proposed infrastructure expenditure</param>
            <param name="kp">Proposed keep expenditure</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewGDP">
            <summary>
            Calculates fief GDP
            </summary>
            <returns>uint containing fief GDP</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewPopulation">
            <summary>
            Calculates fief population increase
            </summary>
            <returns>uint containing new fief population</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewIncome">
            <summary>
            Calculates fief income (NOT including income loss due to unrest/rebellion)
            </summary>
            <returns>uint containing fief income</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcFamExpenseMod(JominiEngine.Character)">
            <summary>
            Calculates effect of financial controller on fief family expenses
            </summary>
            <returns>double containing fief family expenses modifier</returns>
            <param name="ch">The financial controller (Character)</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcBlfIncMod(System.Boolean)">
            <summary>
            Calculates effect of bailiff on fief income
            </summary>
            <returns>double containing fief income modifier</returns>
            <param name="daysInFiefOK">bool specifying whether bailiff has sufficient days in fief</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcOffIncMod">
            <summary>
            Calculates effect of officials spend on fief income
            </summary>
            <returns>double containing fief income modifier</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcStatusIncmMod">
            <summary>
            Calculates effect of unrest/rebellion on fief income
            </summary>
            <returns>double containing fief income modifier</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewOlordTaxes">
            <summary>
            Calculates overlord taxes
            </summary>
            <returns>uint containing overlord taxes</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewExpenses">
            <summary>
            Calculates fief expenses
            </summary>
            <returns>int containing fief expenses</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcBailExpModif(System.Boolean)">
            <summary>
            Calculates effect of bailiff traits on fief expenses
            </summary>
            <returns>double containing fief expenses modifier</returns>
            <param name="daysInFiefOK">bool specifying whether bailiff has sufficient days in fief</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewBottomLine">
            <summary>
            Calculates fief bottom line
            </summary>
            <returns>uint containing fief income</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcFamilyExpenses">
            <summary>
            Calculates family expenses
            </summary>
            <returns>int containing family expenses</returns>
            <param name="season">string specifying whether to calculate for this or next season</param>
        </member>
        <member name="M:JominiEngine.Fief.AdjustTaxRate(System.Double)">
            <summary>
            Adjusts fief tax rate
            (rate adjustment messages done client side)
            </summary>
            <param name="tx">double containing new tax rate</param>
        </member>
        <member name="M:JominiEngine.Fief.GetMaxSpend(System.String)">
            <summary>
            Gtes the maximum permitted expenditure for the fief of the specified type
            </summary>
            <returns>uint containing maximum permitted expenditure</returns>
            <param name="type">string containing type of expenditure</param>
        </member>
        <member name="M:JominiEngine.Fief.AdjustOfficialsSpend(System.UInt32)">
            <summary>
            Adjusts fief officials expenditure
            </summary>
            <param name="os">uint containing new officials expenditure</param>
        </member>
        <member name="M:JominiEngine.Fief.AdjustInfraSpend(System.UInt32)">
            <summary>
            Adjusts fief infrastructure expenditure
            </summary>
            <param name="infs">uint containing new infrastructure expenditure</param>
        </member>
        <member name="M:JominiEngine.Fief.AdjustGarrisonSpend(System.UInt32)">
            <summary>
            Adjusts fief garrison expenditure
            </summary>
            <param name="gs">uint containing new garrison expenditure</param>
        </member>
        <member name="M:JominiEngine.Fief.AdjustKeepSpend(System.UInt32)">
            <summary>
            Adjusts fief keep expenditure
            </summary>
            <param name="ks">uint containing new keep expenditure</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewFieldLevel">
            <summary>
            Calculates new fief field level (from next season's spend)
            </summary>
            <returns>double containing new field level</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewIndustryLevel">
            <summary>
            Calculates new fief industry level (from next season's spend)
            </summary>
            <returns>double containing new industry level</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewKeepLevel">
            <summary>
            Calculates new fief keep level (from next season's spend)
            </summary>
            <returns>double containing new keep level</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcNewLoyalty">
            <summary>
            Calculates new fief loyalty level (i.e. for next season)
            </summary>
            <returns>double containing new fief loyalty</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcBlfLoyAdjusted(System.Boolean)">
            <summary>
            Calculates effect of bailiff on fief loyalty level
            Also includes effect of traits
            </summary>
            <returns>double containing fief loyalty modifier</returns>
            <param name="daysInFiefOK">bool specifying whether bailiff has sufficient days in fief</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcBaseFiefLoyMod(System.Double,System.Double,JominiEngine.Language)">
            <summary>
            Calculates base effect of bailiff's stats on fief loyalty
            Takes bailiff language into account
            </summary>
            <returns>double containing fief loyalty modifier</returns>
            <param name="stature">Bailiff's stature</param>
            <param name="mngt">Bailiff's management rating</param>
            <param name="lang">Bailiff's language</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcBailLoyTraitMod(System.Boolean)">
            <summary>
            Calculates bailiff's trait modifier for fief loyalty
            </summary>
            <returns>double containing fief loyalty modifier</returns>
            <param name="daysInFiefOK">bool specifying whether bailiff has sufficient days in fief</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcOffLoyMod">
            <summary>
            Calculates effect of officials spend on fief loyalty
            </summary>
            <returns>double containing fief loyalty modifier</returns>
        </member>
        <member name="M:JominiEngine.Fief.CalcGarrLoyMod">
            <summary>
            Calculates effect of garrison spend on fief loyalty
            </summary>
            <returns>double containing fief loyalty modifier</returns>
        </member>
        <member name="M:JominiEngine.Fief.ValidateFiefExpenditure">
            <summary>
            Validates proposed expenditure levels, auto-adjusting where necessary
            </summary>
        </member>
        <member name="M:JominiEngine.Fief.AutoAdjustExpenditure(System.UInt32)">
            <summary>
            Automatically adjusts expenditure at end of season, if exceeds treasury
            </summary>
            <param name="difference">The amount by which expenditure exceeds treasury</param>
        </member>
        <member name="M:JominiEngine.Fief.GetAvailableTreasury(System.Boolean)">
            <summary>
            Calculates amount available in treasury for financial transactions
            </summary>
            <returns>int containing amount available</returns>
            <param name="deductFiefExpense">bool indicating whether to account for fief expenses in the calculation</param>
        </member>
        <member name="M:JominiEngine.Fief.CheckExpenditureOK(System.UInt32)">
            <summary>
            Compares expenditure level with fief treasury
            </summary>
            <returns>bool indicating whether expenditure acceptable</returns>
            <param name="totalSpend">proposed total expenditure for next season</param>
        </member>
        <member name="M:JominiEngine.Fief.UpdateFief">
            <summary>
            Updates fief data at the end/beginning of the season
            </summary>
        </member>
        <member name="M:JominiEngine.Fief.CheckFiefStatus">
            <summary>
            Checks for transition from calm to unrest/rebellion, or from unrest to calm
            </summary>
            <returns>char indicating fief status</returns>
        </member>
        <member name="M:JominiEngine.Fief.AddCharacter(JominiEngine.Character)">
            <summary>
            Adds character to characters list
            </summary>
            <param name="ch">Character to be inserted into characters list</param>
        </member>
        <member name="M:JominiEngine.Fief.RemoveCharacter(JominiEngine.Character)">
            <summary>
            Removes character from characters list
            </summary>
            <returns>bool indicating success/failure</returns>
            <param name="ch">Character to be removed from characters list</param>
        </member>
        <member name="M:JominiEngine.Fief.AddArmy(System.String)">
            <summary>
            Adds army to armies list
            </summary>
            <param name="armyID">ID of army to be inserted</param>
        </member>
        <member name="M:JominiEngine.Fief.RemoveArmy(System.String)">
            <summary>
            Removes army from armies list
            </summary>
            <returns>bool indicating success/failure</returns>
            <param name="armyID">ID of army to be removed</param>
        </member>
        <member name="M:JominiEngine.Fief.BarCharacter(System.String)">
            <summary>
            Bar a specific character from the fief's keep
            </summary>
            <param name="ch">Character to be barred</param>
        </member>
        <member name="M:JominiEngine.Fief.RemoveBarCharacter(System.String)">
            <summary>
            Removes a fief keep bar from a specific character
            </summary>
            <returns>bool indicating success/failure</returns>
            <param name="ch">Character for whom bar to be removed</param>
        </member>
        <member name="M:JominiEngine.Fief.CallUpTroops(System.Double,System.Double)">
            <summary>
            Calculates the result of a call for troops
            </summary>
            <returns>int containing number of troops responding to call</returns>
            <param name="minProportion">double specifying minimum proportion of total troop number required</param>
            <param name="maxProportion">double specifying maximum proportion of total troop number required</param>
        </member>
        <member name="M:JominiEngine.Fief.CalcMaxTroops">
            <summary>
            Calculates the maximum number of troops available for call up in the fief
            </summary>
            <returns>int containing maximum number of troops</returns>
        </member>
        <member name="M:JominiEngine.Fief.GetGarrisonSize">
            <summary>
            Calculates the garrison size for the fief
            </summary>
            <returns>int containing the garrison size</returns>
        </member>
        <member name="M:JominiEngine.Fief.GetOverlord">
            <summary>
            Gets fief's overlord
            </summary>
            <returns>The overlord</returns>
        </member>
        <member name="M:JominiEngine.Fief.GetSiege">
            <summary>
            Gets the fief's siege object
            </summary>
            <returns>the siege</returns>
        </member>
        <member name="M:JominiEngine.Fief.GetRightfulKing">
            <summary>
            Gets the fief's rightful king (i.e. the king of the kingdom that the fief traditionally belongs to)
            </summary>
            <returns>The king</returns>
        </member>
        <member name="M:JominiEngine.Fief.GetCurrentKing">
            <summary>
            Gets the fief's current king (i.e. the king of the current owner)
            </summary>
            <returns>The king</returns>
        </member>
        <member name="M:JominiEngine.Fief.CheckEnemyOccupation">
            <summary>
            Checks if the fief is under enemy occupation
            </summary>
            <returns>bool indicating whether is under enemy occupation</returns>
        </member>
        <member name="M:JominiEngine.Fief.GetRightfulKingdom">
            <summary>
            Gets the fief's rightful kingdom (i.e. the kingdom that it traditionally belongs to)
            </summary>
            <returns>The kingdom</returns>
        </member>
        <member name="M:JominiEngine.Fief.GetCurrentKingdom">
            <summary>
            Gets the fief's current kingdom (i.e. the kingdom of the current owner)
            </summary>
            <returns>The kingdom</returns>
        </member>
        <member name="M:JominiEngine.Fief.ChangeOwnership(JominiEngine.PlayerCharacter,JominiEngine.ProtoMessage@,System.String)">
            <summary>
            Processes the functions involved in a change of fief ownership
            </summary>
            <returns>bool indicating success</returns>
            <param name="newOwner">The new owner</param>
            <param name="circumstance">The circumstance under which the change of ownership is taking place</param>
        </member>
        <member name="M:JominiEngine.Fief.CheckFieldArmyInKeep">
            <summary>
            Checks to see if there is currently a field army in the fief keep
            </summary>
            <returns>bool indicating presence of a field army</returns>
        </member>
        <member name="M:JominiEngine.Fief.Quell_checkSuccess(JominiEngine.Army)">
            <summary>
            Checks to see if an attempts to quell a rebellion has been successful
            </summary>
            <returns>bool indicating quell success or failure</returns>
            <param name="a">The army trying to quell the rebellion</param>
        </member>
        <member name="M:JominiEngine.Fief.QuellRebellion(JominiEngine.Army,JominiEngine.ProtoMessage@)">
            <summary>
            Attempts to quell the rebellion in the fief using the specified army
            </summary>
            <returns>bool indicating quell success or failure</returns>
            <param name="a">The army trying to quell the rebellion</param>
        </member>
        <member name="M:JominiEngine.Fief.getTravelCost(JominiEngine.Fief,System.String)">
            <summary>
            Gets travel cost (in days) to move to a nieghbouring fief
            </summary>
            <returns>double containing travel cost</returns>
            <param name="target">Target fief</param>
        </member>
        <member name="M:JominiEngine.Fief.CheckToShowFinancialData(System.Int32,JominiEngine.Siege)">
            <summary>
            Checks to see if display of financial data for the specified financial period
            is permitted due to ongoing siege
            </summary>
            <returns>bool indicating whether display is permitted</returns>
            <param name="target">int indicating desired financial period relative to current season</param>
            <param name="s">The siege</param>
        </member>
        <member name="M:JominiEngine.Fief.GetFinancialYear(System.Int32)">
            <summary>
            Gets the year for the specified financial period
            </summary>
            <returns>The year</returns>
            <param name="target">int indicating desired financial period relative to current season</param>
        </member>
        <member name="M:JominiEngine.Fief.GetFinancialSeason(System.Int32)">
            <summary>
            Gets the season for the specified financial period
            </summary>
            <returns>The season</returns>
            <param name="target">int indicating desired financial period relative to current season</param>
        </member>
        <member name="M:JominiEngine.Fief.TreasuryTransfer(JominiEngine.Fief,System.Int32,JominiEngine.ProtoMessage@)">
            <summary>
            Transfers funds between the fief treasury and another fief's treasury
            </summary>
            <param name="to">The Fief to which funds are to be transferred</param>
            <param name="amount">How much to be transferred</param>
        </member>
        <member name="M:JominiEngine.Fief.CreateDefendingArmy">
            <summary>
            Creates a defending army for defence of a fief during pillage or siege
            </summary>
            <returns>The defending army</returns>
        </member>
        <member name="M:JominiEngine.Fief.BarCharacter(JominiEngine.Character)">
            <summary>
            Bars a Character from the keep
            </summary>
            <returns>Bool indicating success</returns>
            <param name="toBeBarred">The Character to be barred</param>
        </member>
        <member name="M:JominiEngine.Fief.UnbarCharacter(System.String)">
            <summary>
            Unbars a Character
            </summary>
            <returns>Bool indicating success</returns>
            <param name="toBeUnbarred">ID of Character to be unbarred</param>
        </member>
        <member name="M:JominiEngine.Fief.BarNationality(System.String)">
            <summary>
            Bars a Nationality from entering the keep
            </summary>
            <returns>Bool indicating success</returns>
            <param name="toBeBarred">The ID of the Nationality to be barred</param>
        </member>
        <member name="M:JominiEngine.Fief.UnbarNationality(System.String)">
            <summary>
            Unbars a Nationality from entering the keep
            </summary>
            <returns>Bool indicating success</returns>
            <param name="toBeUnbarred">The ID of the Nationality to be unbarred</param>
        </member>
        <member name="M:JominiEngine.Fief.ListCharsInMeetingPlace(System.String,JominiEngine.Character)">
            <summary>
            Returns descriptions of characters in Court, Tavern, outside keep for this fief
            </summary>
            <param name="place">String specifying whether court, tavern, outside keep</param>
            <param name="pc">PlayerCharacter viewing these details </param>
        </member>
        <member name="T:JominiEngine.Fief_Serialised">
            <summary>
            Class used to convert Fief to/from serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.province">
            <summary>
            Holds fief's Province object (provinceID)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.population">
            <summary>
            Holds fief population
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.fields">
            <summary>
            Holds fief field level
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.industry">
            <summary>
            Holds fief industry level
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.troops">
            <summary>
            Holds no. trrops in fief
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.taxRate">
            <summary>
            Holds fief tax rate
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.taxRateNext">
            <summary>
            Holds fief tax rate (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.officialsSpendNext">
            <summary>
            Holds expenditure on officials (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.garrisonSpendNext">
            <summary>
            Holds expenditure on garrison (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.infrastructureSpendNext">
            <summary>
            Holds expenditure on infrastructure (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.keepSpendNext">
            <summary>
            Holds expenditure on keep (next season)
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.keyStatsCurrent">
            <summary>
            Holds key data for current season
            0 = loyalty
            1 = GDP
            2 = tax rate
            3 = official expenditure
            4 = garrison expenditure
            5 = infrastructure expenditure
            6 = keep expenditure
            7 = keep level
            8 = income
            9 = family expenses
            10 = total expenses
            11 = overlord taxes
            12 = overlord tax rate
            13 = bottom line
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.keyStatsPrevious">
            <summary>
            Holds key data for previous season
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.keepLevel">
            <summary>
            Holds fief keep level
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.loyalty">
            <summary>
            Holds fief loyalty
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.status">
            <summary>
            Holds fief status (code)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.language">
            <summary>
            Holds fief language (ID)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.terrain">
            <summary>
            Holds terrain object (terrainCode)
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.charactersInFief">
            <summary>
            Holds list of characters present in fief (charIDs)
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.gaol">
            <summary>
            Characters in gaol
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.barredCharacters">
            <summary>
            Holds list of characters banned from keep (charIDs)
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.barredNationalities">
            <summary>
            Holds nationalitie banned from keep (IDs)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.ancestralOwner">
            <summary>
            Holds fief ancestral owner (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.bailiff">
            <summary>
            Holds fief bailiff (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.bailiffDaysInFief">
            <summary>
            Number of days the bailiff has been resident in the fief (this season)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.treasury">
            <summary>
            Holds fief treasury
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.armies">
            <summary>
            Holds armies present in the fief (armyIDs)
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.hasRecruited">
            <summary>
            Identifies if recruitment has occurred in the fief
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.isPillaged">
            <summary>
            Identifies if pillage has occurred in the fief in the current season
            </summary>
        </member>
        <member name="F:JominiEngine.Fief_Serialised.troopTransfers">
            <summary>
            Holds troop detachments in the fief awaiting transfer
            String[] contains from (charID), to (charID), size, days left when detached
            </summary>
        </member>
        <member name="P:JominiEngine.Fief_Serialised.siege">
            <summary>
            Siege (siegeID) of active siege
            </summary>
        </member>
        <member name="M:JominiEngine.Fief_Serialised.#ctor(JominiEngine.Fief)">
            <summary>
            Constructor for Fief_Serialised
            </summary>
            <param name="f">Fief object to use as source</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Fief_Serialised.#ctor(System.String,System.String,System.String,System.Int32,System.Double,System.Double,System.UInt32,System.Double,System.Double,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double[],System.Double[],System.Double,System.Double,System.Char,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Double,System.Int32,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.Dictionary{System.String,JominiEngine.ProtoDetachment},System.Boolean,System.Byte,System.String,System.String,System.String,System.String,System.String)" -->
        <member name="M:JominiEngine.Fief_Serialised.#ctor">
            <summary>
            Constructor for Fief_Serialised taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.Game">
            <summary>
                Class representing game
                It will initialise all the game objects and control the flow of the game
                The control code from all the form classes will either be put in here or accessed from here
                For example, if a server gets an incoming message from a client and finds that it is some game action to be taken,
                it might send this to Game, where the precise action will be determined from the message, carried out and the
                result send back via server
            </summary>
        </member>
        <member name="M:JominiEngine.Game.#ctor">
            <summary>
                Create a new game
            </summary>
        </member>
        <member name="M:JominiEngine.Game.InitGameObjects(System.String,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Initialises all game objects
            </summary>
            <param name="gameID">gameID of the game</param>
            <param name="objectDataFile">Name of file containing game object CSV data</param>
            <param name="mapDataFile">Name of file containing map CSV data</param>
            <param name="type">Game type</param>
            <param name="duration">Game duration (years)</param>
            <param name="start">Start year</param>
            <param name="king1">ID of PlayerCharacter in role of kingOne</param>
            <param name="king2">ID of PlayerCharacter in role of kingTwo</param>
            <param name="herald1">ID of PlayerCharacter in role of heraldOne</param>
            <param name="herald2">ID of PlayerCharacter in role of heraldTwo</param>
            <param name="sysAdmin">ID of PlayerCharacter in role of sysAdmin</param>
        </member>
        <member name="M:JominiEngine.Game.LoadFromCode(System.UInt32)">
            <summary>
                Creates some game objects from code (temporary, for testing)
            </summary>
            <param name="start">Start year</param>
        </member>
        <member name="M:JominiEngine.Game.SynchroniseVictoryData">
            <summary>
                Ensures that the Globals_Game.victoryData is up-to-date
            </summary>
        </member>
        <member name="M:JominiEngine.Game.SeasonUpdate">
            <summary>
                Updates game objects at end/start of season
            </summary>
        </member>
        <member name="M:JominiEngine.Game.UseChar(System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to switch to controlling a different Character
            </summary>
            <param name="charID">ID of character to control</param>
            <param name="client">Client who wishes to use this character</param>
            <returns>
                ProtoCharacter message with response type "Success" on success, ProtoMessage with ErrorGenericCharacterUnidentified
                for invalid character ID
                ProtoMessage with ErrorGenericUnauthorised if do not own character, CharacterIsDead if trying to use a dead
                character,
            </returns>
            <remarks>
                On success the client's active character is changed. Empty or null charIDs default to the client's
                PlayerCharacter
            </remarks>
        </member>
        <member name="M:JominiEngine.Game.GetPlayers(JominiEngine.Client)">
            <summary>
                Processes a client request to get a list of all players, including usernames, nationality and PlayerCharacter names
            </summary>
            <param name="client">Client who is requesting list of players</param>
            <returns>Collection of other players wrapped in a ProtoMessage</returns>
        </member>
        <member name="M:JominiEngine.Game.ViewCharacter(System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to view a character. The level of detail varies based on who is viewing which character
            </summary>
            <param name="charID">ID of character to view</param>
            <param name="client">Client who wishes to view Character</param>
            <returns>
                Details of character if successful (hides information if do not own character, hides location if character is
                captured), CharacterUnidentified if invalid, MessageInvalid if null
            </returns>
        </member>
        <member name="M:JominiEngine.Game.HireNPC(System.String,System.UInt32,JominiEngine.Client)">
            <summary>
                Processes a client request to hire an NPC by bidding
            </summary>
            <param name="charID">ID of character to hire</param>
            <param name="bid">Amount client wishes to bid</param>
            <param name="client">Client to hire NPC</param>
            <returns>
                ProtoNPC containing updated hire details and hire status- may have bidded successfully but not bid high enough;
                MessageInvalid if null character id; CharacterUnidentified if invalid character ID, ErrorGenericTooFarFromFief if
                not in same fief as character to hire, CharacterHeldCaptive if your character is held captive,
                CharacterHireNotEmployable if character cannot be employed. Within the ActionController will return PositiveInteger
                if a bid is not included or is invalid.
            </returns>
        </member>
        <member name="M:JominiEngine.Game.FireNPC(System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to fire an NPC
            </summary>
            <param name="charID">Character ID of character to be fired</param>
            <param name="client">Client who wishes to fire NPC</param>
            <returns>
                MessageInvalid if not a valid character ID; CharacterUnidentified if not a valid character;
                CharacterFireNotEmployee if trying to fire someone who is not an employee; Success otherwise
            </returns>
        </member>
        <member name="M:JominiEngine.Game.ViewArmy(System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to view an army. Details will vary based on whether army is owned by client or not
            </summary>
            <param name="armyID">Army ID of army to view</param>
            <param name="client">Client who wishes to view army</param>
            <returns>
                ProtoArmy with all details if successful; MessageInvalid if no or invalid army id; ArmyUnidentified if not in
                master army list; Unauthorised if too far from army
            </returns>
        </member>
        <member name="M:JominiEngine.Game.DisbandArmy(System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to disband an army
            </summary>
            <param name="armyID">Army ID of army to be disbanded</param>
            <param name="client">Client who wishes to disband the army</param>
            <returns>
                Success if completed without error; MessageInvalid if no or invalid army ID; ArmyUnidentified if army not in
                army master list; Unauthorised if do not own army
            </returns>
        </member>
        <member name="M:JominiEngine.Game.GetNPCList(System.String,System.String,System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to get a list of all NPCs that meet the given type and role
            </summary>
            <param name="type">
                Type of NPC grouping: can be Entourage, Grant, Family, Employ or a combination of Family and Employ
                (for whole household)
            </param>
            <param name="role">
                For use with "Grant" type, the role checks what role is to be granted. Presently only "leader" is
                supported
            </param>
            <param name="item">
                Item that is to be granted control of- in this case, as only army leadership is supported, the item
                will be an army ID
            </param>
            <param name="client">Client who is performing this action</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.TravelTo(System.String,System.String,System.String[],JominiEngine.Client)">
            <summary>
                Processes a client request to travel to another fief
            </summary>
            <param name="charID"></param>
            <param name="fiefID"></param>
            <param name="travelInstructions"></param>
            <param name="client"></param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.ViewFief(System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to view details of another fief. Amount of information returned depends on whether this
                fief is owned by the client
            </summary>
            <param name="fiefID">ID of fief to be viewed</param>
            <param name="client">Client who sent the request to view the fief</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.ViewMyFiefs(JominiEngine.Client)">
            <summary>
                Processes a client request to view all fiefs they own
            </summary>
            <param name="client">Client who sent the request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.AppointBailiff(System.String,System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to appoint a new bailiff to a fief
            </summary>
            <param name="fiefID">The ID of the fief to appoint a bailiff to</param>
            <param name="charID">The ID of the character which will become the new bailiff</param>
            <param name="client">The client who sent the request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.RemoveBailiff(System.String,JominiEngine.Client)">
            <summary>
                Process a client request to remove the current bailiff from a fief
            </summary>
            <param name="fiefID">ID of fief from which to remove the bailiff</param>
            <param name="client">Client who sent the request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.BarCharacters(System.String,System.String[],JominiEngine.Client)">
            <summary>
                Process a client request to bar a number of characters from the fief
            </summary>
            <param name="fiefID">ID of fief</param>
            <param name="charIDs">Array of all IDs of characters to be banned</param>
            <param name="client">Client who sent the request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.UnbarCharacters(System.String,System.String[],JominiEngine.Client)">
            <summary>
                Processes a client request to unbar a number of characters from a fief
            </summary>
            <param name="fiefID">ID of fief to unbar the characters from</param>
            <param name="charIDs">List of character IDs of characters to be unbarred</param>
            <param name="client">Client who submitted the request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.BarNationalities(System.String,System.String[],JominiEngine.Client)">
            <summary>
                Bar a number of nationalities from the fief
            </summary>
            <param name="fiefID">ID of fief to bar nationalities from</param>
            <param name="natIDs">List of nationality IDs of nationalities to be banned</param>
            <param name="client">Client who submitted the request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.UnbarNationalities(System.String,System.String[],JominiEngine.Client)">
            <summary>
                Processes a client request to unbar a number of nationalities from a fief
            </summary>
            <param name="fiefID">ID of fief from which to unbar nationalities</param>
            <param name="natIDs">List of nationality IDs to unbar</param>
            <param name="client">Client who submitted request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.GrantFiefTitle(System.String,System.String,JominiEngine.Client)">
            <summary>
                Processes a client request to grant the title of a fief to another character
            </summary>
            <param name="fiefID">ID of fief to grant the title of</param>
            <param name="charID">ID of character who will become the new title holder</param>
            <param name="client">Client who submitted the request</param>
            <returns>Result of request</returns>
        </member>
        <member name="M:JominiEngine.Game.AdjustExpenditure(System.String,System.Double[],JominiEngine.Client)">
            <summary>
                Processes a client request to adjust the expenditure in a fief
            </summary>
            <param name="fiefID"></param>
            <param name="adjustedValues"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.Game.TryForChild(System.String,JominiEngine.Client)">
            <summary>
            
            </summary>
            <param name="charID">Father</param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.Game.SpyCharacter(System.String,System.String,JominiEngine.Client)">
            <summary>
            Process a client's request to spy on a character
            </summary>
            <param name="charID">The spy's character ID</param>
            <param name="targetID">The target's character ID</param>
            <param name="client">Client who sent the request</param>
            <returns>Result of attempting to spy</returns>
        </member>
        <member name="M:JominiEngine.Game.SpyFief(System.String,System.String,JominiEngine.Client)">
            <summary>
            Process a client's request to spy on a fief
            </summary>
            <param name="charID">Character ID of spy</param>
            <param name="fiefID">Fief ID of fief to spy on</param>
            <param name="client">Client who sent the request</param>
            <returns>Result of attempt to spy</returns>
        </member>
        <member name="M:JominiEngine.Game.Kidnap(System.String,System.String,JominiEngine.Client)">
            <summary>
                Kidnap a target character. Client must own kidnapper, and both targetID and kidnapperID must be valid Character IDs
            </summary>
            <param name="targetID">Character ID of target Character</param>
            <param name="kidnapperID">Character ID of kidnapper</param>
            <param name="client">Client who requested kidnapping (must own kidnapper)</param>
            <returns>Result of attempted kidnapping, or an error message</returns>
        </member>
        <member name="M:JominiEngine.Game.ViewCaptives(System.String,JominiEngine.Client)">
            <summary>
                Fief all captives in a location. Location can be "all" for all held captives across all Fiefs, or a Fief ID for
                captives in that fief
            </summary>
            <param name="captiveLocation">Fief ID or "all"</param>
            <param name="client">Client who requested to view captives</param>
            <returns>ProtoGenericArray of ProtoCharacterOverview containing details of all captives, or an error message</returns>
        </member>
        <member name="M:JominiEngine.Game.ExecuteCaptive(System.String,JominiEngine.Client)">
            <summary>
                Process a client request to kill a captive
            </summary>
            <param name="charID">ID of character to execute</param>
            <param name="client">client who sent request</param>
            <returns>Result of this request</returns>
        </member>
        <member name="M:JominiEngine.Game.ActionController(JominiEngine.ProtoMessage,JominiEngine.Client)">
            <summary>
            Translates a message from a client into an action to be carried out
            </summary>
            <param name="msgIn">The client's request. Cannot be null</param>
            <param name="_client">The client who sent the request. Cannot be null</param>
            <returns>The result of attempting to process the client's request, ranging from the result of an action to an error message</returns>
        </member>
        <member name="T:JominiEngine.GameClock">
            <summary>
            Class storing season data
            </summary>
        </member>
        <member name="P:JominiEngine.GameClock.id">
            <summary>
            Holds clock ID
            </summary>
        </member>
        <member name="F:JominiEngine.GameClock.seasons">
            <summary>
            Holds seasons
            </summary>
        </member>
        <member name="P:JominiEngine.GameClock.currentYear">
            <summary>
            Holds current year
            </summary>
        </member>
        <member name="P:JominiEngine.GameClock.currentSeason">
            <summary>
            Holds current season
            </summary>
        </member>
        <member name="M:JominiEngine.GameClock.#ctor(System.String,System.UInt32,System.Byte)">
            <summary>
            Constructor for GameClock
            </summary>
            <param name="id">String holding clock ID</param>
            <param name="yr">uint holding starting year</param>
            <param name="s">byte holding current season (default: 0)</param>
        </member>
        <member name="M:JominiEngine.GameClock.#ctor">
            <summary>
            Constructor for GameClock taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.GameClock.CalcSeasonTravMod">
            <summary>
            Calculates travel modifier for season
            </summary>
            <returns>double containing travel modifier</returns>
        </member>
        <member name="M:JominiEngine.GameClock.AdvanceSeason">
            <summary>
            Advances GameClock to next season
            </summary>
            <returns>double containing travel modifier</returns>
        </member>
        <member name="T:JominiEngine.Actions">
            <summary>
            enum representing all valid actions in the gane
            </summary>
        </member>
        <member name="T:JominiEngine.DisplayMessages">
            <summary>
            enum representing all strings that may be sent to a client,
             mapped to string from enum on client side
            </summary>
        </member>
        <member name="F:JominiEngine.DisplayMessages.None">
            <summary>
            Default message; used only when nothing to display
            </summary>
        </member>
        <member name="F:JominiEngine.DisplayMessages.Success">
            <summary>
            Indicates action was successful
            </summary>
        </member>
        <member name="F:JominiEngine.DisplayMessages.CharacterDaysJourney">
            <summary>
            Character does not have enough days to make this journey, so their destination has been added to a Go-To list
            </summary>
        </member>
        <member name="F:JominiEngine.DisplayMessages.CharacterMoveEndSiege">
            <summary>
            Character must end siege before moving
            </summary>
        </member>
        <member name="T:JominiEngine.Globals_Game">
            <summary>
            Class storing any required game-wide static variables and related methods
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.ownedPlayerCharacters">
            <summary>
            Dictionary mapping users to player characters
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.ownershipChallenges">
            <summary>
            Holds current challenges for ownership of provinces or kingdoms
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.victoryData">
            <summary>
            Holds data for all players required for the calculation of individual victory
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.victoryDataKeys">
            <summary>
            Holds keys for VictoryData objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.sysAdmin">
            <summary>
            Holds PlayerCharacter associated with the position of sysAdmin for the game
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.kingOne">
            <summary>
            Holds PlayerCharacter associated with the position of king for kingdom one
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.kingTwo">
            <summary>
            Holds PlayerCharacter associated with the position of king for kingdom two
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.princeOne">
            <summary>
            Holds PlayerCharacter associated with the position of prince for kingdom one
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.princeTwo">
            <summary>
            Holds PlayerCharacter associated with the position of prince for kingdom two
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.heraldOne">
            <summary>
            Holds PlayerCharacter associated with the position of herald for kingdom one
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.heraldTwo">
            <summary>
            Holds PlayerCharacter associated with the position of herald for kingdom two
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.registeredObservers">
            <summary>
            List of registered observers
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.npcMasterList">
            <summary>
            Holds all NonPlayerCharacter objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.npcKeys">
            <summary>
            Holds keys for NonPlayerCharacter objects (used when retrieving from database)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JominiEngine.Globals_Game.pcMasterList" -->
        <member name="F:JominiEngine.Globals_Game.pcKeys">
            <summary>
            Holds keys for PlayerCharacter objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.fiefMasterList">
            <summary>
            Holds all Fief objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.fiefKeys">
            <summary>
            Holds keys for Fief objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.provinceMasterList">
            <summary>
            Holds all Province objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.provKeys">
            <summary>
            Holds keys for Province objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.kingdomMasterList">
            <summary>
            Holds all Kingdom objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.kingKeys">
            <summary>
            Holds keys for Kingdom objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.rankMasterList">
            <summary>
            Holds all Rank objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.rankKeys">
            <summary>
            Holds keys for Rank objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.terrainMasterList">
            <summary>
            Holds all Terrain objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.terrKeys">
            <summary>
            Holds keys for Terrain objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.baseLanguageMasterList">
            <summary>
            Holds all BaseLanguage objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.baseLangKeys">
            <summary>
            Holds keys for BaseLanguage objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.languageMasterList">
            <summary>
            Holds all Language objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.langKeys">
            <summary>
            Holds keys for Language objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.traitMasterList">
            <summary>
            Holds all Trait objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.traitKeys">
            <summary>
            Holds keys for Trait objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.armyMasterList">
            <summary>
            Holds all army objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.armyKeys">
            <summary>
            Holds keys for army objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.siegeMasterList">
            <summary>
            Holds all siege objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.siegeKeys">
            <summary>
            Holds keys for siege objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.nationalityMasterList">
            <summary>
            Holds all nationality objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.nationalityKeys">
            <summary>
            Holds keys for nationality objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.positionMasterList">
            <summary>
            Holds all position objects
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.positionKeys">
            <summary>
            Holds keys for position objects (used when retrieving from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.goToList">
            <summary>
            Holds Character_Serialised objects with existing goTo queues (used during load from database)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.myRand">
            <summary>
            Holds random for use with various methods
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.newCharID">
            <summary>
            Holds next value for character ID
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.newArmyID">
            <summary>
            Holds next value for army ID
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.newDetachmentID">
            <summary>
            Holds next value for detachment ID
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.newAilmentID">
            <summary>
            Holds next value for ailment ID
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.newSiegeID">
            <summary>
            Holds next value for siege ID
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.newJournalEntryID">
            <summary>
            Holds next value for JournalEntry ID
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.newOwnChallengeID">
            <summary>
            Holds next value for OwnershipChallenge ID
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.gameMap">
            <summary>
            Holds HexMapGraph for this game
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.gameMapLayout">
            <summary>
            Holds the hex positions of fiefs in the game-map.
            </summary>
        </member>
        <member name="P:JominiEngine.Globals_Game.clock">
            <summary>
            Holds GameClock for this game
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.scheduledEvents">
            <summary>
            Holds scheduled events
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.pastEvents">
            <summary>
            Holds past events
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.jEntryPriorities">
            <summary>
            Holds priorities for types of JournalEntry
            Key = JournalEntry type
            Value = 0-2 byte indicating priority level
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.promotedNPCs">
            <summary>
            Holds newly promoted NPCs to be added to pcMasterList (during seasonUpdate)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.gameType">
            <summary>
            Holds type of game (sets victory conditions)
            0 = individual point game
            1 = individual position game
            2 = team historical game
            </summary>
        </member>
        <member name="T:JominiEngine.Globals_Game.Stats">
            <summary>
            Enum representing character stats, which affect the success of certain actions and are affected by traits
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.BATTLE">
            <summary>
            Affects how effecive character is in leading battle
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.SIEGE">
            <summary>
            Affects character's effectiveness during a siege
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.NPCHIRE">
            <summary>
            Affects price at which NPCs can be hired at
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.FAMEXPENSE">
            <summary>
            Affects how many expenses will be paid to family
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.FIEFEXPENSE">
            <summary>
            Affects fief expenses
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.FIEFLOY">
            <summary>
            Affects fief loyalty
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.DEATH">
            <summary>
            Affects character's likelihood of dying
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.TIME">
            <summary>
            Affects how many days certain actions will take
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.VIRILITY">
            <summary>
            Affects how likely a character is to produce offspring
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.PERCEPTION">
            <summary>
            Affects how likely a character is to notice and prevent acts of subterfuge
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.Stats.STEALTH">
            <summary>
            Affects how likely a character is to succeed in committing subterfuge
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.duration">
            <summary>
            Holds duration (number of turns) for the current game
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.startYear">
            <summary>
            Holds start year for current game
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.loadFromDatabase">
            <summary>
            Holds bool indicating whether or not to load initial object data from database on startup
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.loadFromCSV">
            <summary>
            Holds bool indicating whether or not to load initial object data from CSV file
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.writeToDatabase">
            <summary>
            Holds bool indicating whether or not to write current object data to database on exit
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.statureCapInForce">
            <summary>
            Holds bool indicating whether or not a cap on characters' stature modifier is in force
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Game.game">
            <summary>
            Holds the current Game
            </summary>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetGameEndDate">
            <summary>
            Gets the game's end date (year)
            </summary>
            <returns>uint containing end year</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Globals_Game.GetCurrentScores" -->
        <member name="M:JominiEngine.Globals_Game.GetTotalMoney">
            <summary>
            Gets the total money owned by all PlayerCharacters in the game
            </summary>
            <returns>int containing total money</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetTotalPopulation">
            <summary>
            Gets the total population for all fiefs in the game
            </summary>
            <returns>int containing total population</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetTotalFiefs">
            <summary>
            Gets the total number of fiefs in the game
            </summary>
            <returns>int containing number of fiefs</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetNextCharID">
            <summary>
            Gets the next available newCharID, then increments it
            </summary>
            <returns>string containing newCharID</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetNextArmyID">
            <summary>
            Gets the next available newArmyID, then increments it
            </summary>
            <returns>string containing newArmyID</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetNextDetachmentID">
            <summary>
            Gets the next available newDetachmentID, then increments it
            </summary>
            <returns>string containing newDetachmentID</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetNextAilmentID">
            <summary>
            Gets the next available newAilmentID, then increments it
            </summary>
            <returns>string containing newAilmentID</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetNextSiegeID">
            <summary>
            Gets the next available newSiegeID, then increments it
            </summary>
            <returns>string containing newSiegeID</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetNextJournalEntryID">
            <summary>
            Gets the next available newJournalEntryID, then increments it
            </summary>
            <returns>uint containing newJournalEntryID</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.getCharFromID(System.String)">
            <summary>
            Returns relevant character from ID (PlayerCharacter or NonPlayerCharacter)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.AddScheduledEvent(JominiEngine.JournalEntry)">
            <summary>
            Adds a new JournalEntry to the scheduledEvents Journal
            </summary>
            <returns>bool indicating success</returns>
            <param name="min">The JournalEntry to be added</param>
        </member>
        <member name="M:JominiEngine.Globals_Game.AddPastEvent(JominiEngine.JournalEntry)">
            <summary>
            Adds a new JournalEntry to the pastEvents Journal, and to the Journals of interested players
            </summary>
            <returns>bool indicating success</returns>
            <param name="min">The JournalEntry to be added</param>
        </member>
        <member name="M:JominiEngine.Globals_Game.GetNextOwnChallengeID">
            <summary>
            Gets the next available newOwnChallengeID, then increments it
            </summary>
            <returns>string containing newOwnChallengeID</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.CheckForExistingChallenge(System.String)">
            <summary>
            Checks for the existence of a challenge for the same Place
            </summary>
            <returns>bool indicating the existence of a challenge</returns>
            <param name="placeID">ID of Place for new challenge</param>
        </member>
        <member name="M:JominiEngine.Globals_Game.AddOwnershipChallenge(JominiEngine.OwnershipChallenge,JominiEngine.ProtoMessage@)">
            <summary>
            Adds a new OwnershipChallenge to the ownershipChallenges collection
            </summary>
            <returns>bool indicating success</returns>
            <param name="challenge">OwnershipChallenge to be added</param>
        </member>
        <member name="M:JominiEngine.Globals_Game.ProcessOwnershipChallenges">
            <summary>
            Processes all challenges in the ownershipChallenges collection
            </summary>
            <returns>bool indicating at least one place has changed ownership</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.CheckForVictory">
            <summary>
            Checks for victory / end game
            </summary>
            <returns>bool indicating game end (victory achieved)</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.CheckTeamHistoricalVictory">
            <summary>
            Checks for a historical team victory (victory depends on whether the English own any French fiefs)
            </summary>
            <remarks>Very early test version - not properly functional</remarks>
            <returns>Kingdom object belonging to victor</returns>
        </member>
        <member name="M:JominiEngine.Globals_Game.CheckTeamAbsoluteVictory">
            <summary>
            Checks for absolute victory (all fiefs owned by one kingdom)
            </summary>
            <returns>Kingdom object belonging to victor</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Globals_Game.ProcessScheduledEvents" -->
        <member name="M:JominiEngine.Globals_Game.UpdatePlayer(System.String,JominiEngine.DisplayMessages,System.String[],System.String)">
            <summary>
            Sends an update to a particular user
            </summary>
            <param name="player"></param>
            <param name="message"></param>
        </member>
        <member name="M:JominiEngine.Globals_Game.UpdatePlayer(System.String,JominiEngine.ProtoMessage)">
            <summary>
            Send an update to a particular user (for use when update is particularly complex)
            </summary>
            <param name="player">Player to send message to</param>
            <param name="message">Message to be sent</param>
        </member>
        <member name="M:JominiEngine.Globals_Game.RegisterObserver(JominiEngine.Client)">
            <summary>
            Adds an observer (Client object) to the list of registered observers
            </summary>
            <param name="obs">Observer to be added</param>
        </member>
        <member name="M:JominiEngine.Globals_Game.RemoveObserver(JominiEngine.Client)">
            <summary>
            Removes an observer (Form1 object) from the list of registered observers
            </summary>
            <param name="obs">Observer to be removed</param>
        </member>
        <member name="M:JominiEngine.Globals_Game.NotifyObservers(JominiEngine.DisplayMessages,JominiEngine.PlayerCharacter[])">
            <summary>
            Notifies all observers (Form1 objects) in the list of registered observers
            that a change has occured to the data
            </summary>
            <param name="info">Enum representing the type of notification</param>
        </member>
        <member name="T:JominiEngine.VictoryData">
            <summary>
            Class storing data on which to base individual victory
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.playerID">
            <summary>
            Holds player ID
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.playerCharacterID">
            <summary>
            Holds PlayerCharacter ID
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.startStature">
            <summary>
            Holds player's stature at start of game
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.currentStature">
            <summary>
            Holds player's current stature
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.startPopulation">
            <summary>
            Holds percentage of population under player's control at start of game
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.currentPopulation">
            <summary>
            Holds percentage of population currently under player's control
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.startFiefs">
            <summary>
            Holds percentage of fiefs under player's control at start of game
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.currentFiefs">
            <summary>
            Holds percentage of fiefs currently under player's control
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.startMoney">
            <summary>
            Holds the percentage of total funds owned by the player at start of game
            </summary>
        </member>
        <member name="F:JominiEngine.VictoryData.currentMoney">
            <summary>
            Holds the percentage of total funds currently owned by the player
            </summary>
        </member>
        <member name="M:JominiEngine.VictoryData.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor for VictoryData
            </summary>
            <param name="player">string holding Language ID</param>
            <param name="pc">string holding PlayerCharacter ID</param>
            <param name="stat">double player's stature at start of game</param>
            <param name="pop">double holding percentage of population under player's control at start of game</param>
            <param name="fiefs">double holding percentage of fiefs under player's control at start of game</param>
            <param name="money">double holding the percentage of total funds owned by the player at start of game</param>
        </member>
        <member name="M:JominiEngine.VictoryData.#ctor">
            <summary>
            Constructor for VictoryData taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.VictoryData.UpdateData">
            <summary>
            Updates the current data
            </summary>
        </member>
        <member name="M:JominiEngine.VictoryData.CalcStatureScore">
            <summary>
            Calculates the current stature score
            </summary>
            <returns>double containing the stature score</returns>
        </member>
        <member name="M:JominiEngine.VictoryData.CalcPopulationScore">
            <summary>
            Calculates the current population  score
            </summary>
            <returns>double containing the population score</returns>
        </member>
        <member name="M:JominiEngine.VictoryData.CalcFiefScore">
            <summary>
            Calculates the current fief score
            </summary>
            <returns>double containing the fief score</returns>
        </member>
        <member name="M:JominiEngine.VictoryData.CalcMoneyScore">
            <summary>
            Calculates the current money score
            </summary>
            <returns>double containing the money score</returns>
        </member>
        <member name="T:JominiEngine.OwnershipChallenge">
            <summary>
            Struct storing data on ownership challenges (for Province or Kingdom)
            </summary>
        </member>
        <member name="F:JominiEngine.OwnershipChallenge.id">
            <summary>
            Holds ID of challenge
            </summary>
        </member>
        <member name="F:JominiEngine.OwnershipChallenge.challengerID">
            <summary>
            Holds ID of challenger
            </summary>
        </member>
        <member name="F:JominiEngine.OwnershipChallenge.placeType">
            <summary>
            Holds type of place
            </summary>
        </member>
        <member name="F:JominiEngine.OwnershipChallenge.placeID">
            <summary>
            Holds ID of place
            </summary>
        </member>
        <member name="F:JominiEngine.OwnershipChallenge.counter">
            <summary>
            Holds number of seasons so far that challenger has met ownership conditions
            </summary>
        </member>
        <member name="M:JominiEngine.OwnershipChallenge.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for OwnershipChallenge
            </summary>
            <param name="chalID">string holding challenge ID</param>
            <param name="chID">string holding ID of challenger</param>
            <param name="type">string holding type of place</param>
            <param name="place">string holding ID of place</param>
        </member>
        <member name="M:JominiEngine.OwnershipChallenge.GetChallenger">
            <summary>
            Gets the PlayerCharacter who has issued the challenge
            </summary>
            <returns>The challenger (PlayerCharacter)</returns>
        </member>
        <member name="M:JominiEngine.OwnershipChallenge.GetPlace">
            <summary>
            Gets the Place being contested
            </summary>
            <returns>The Place</returns>
        </member>
        <member name="M:JominiEngine.OwnershipChallenge.IncrementCounter">
            <summary>
            Increments the season counter
            </summary>
        </member>
        <member name="T:JominiEngine.Globals_Server">
            <summary>
            Class storing any required static variables for server-side
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Server.Clients">
            <summary>
            Holds the usernames and Client objects of all players
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Server.client_keys">
            <summary>
            Holds all usernames/playerIDs
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Server.rCluster">
            <summary>
            Holds target RiakCluster 
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Server.rClient">
            <summary>
            Holds RiakClient to communicate with RiakCluster
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Server.newGameID">
            <summary>
            Holds next value for game ID
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JominiEngine.Globals_Server.combatValues" -->
        <member name="F:JominiEngine.Globals_Server.troopTypeAdvantages">
            <summary>
            Dictionary mapping two troop types to a value representing one's effectiveness against the other
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JominiEngine.Globals_Server.recruitRatios" -->
        <member name="F:JominiEngine.Globals_Server.battleProbabilities">
            <summary>
            Holds probabilities for battle occurring at certain combat odds under certain conditions
            Key = 'odds', 'battle', 'pillage'
            Value = percentage likelihood of battle occurring
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Server.gameTypes">
            <summary>
            Holds type of game  (sets victory conditions)
            </summary>
        </member>
        <member name="F:JominiEngine.Globals_Server.server">
            <summary>
            Holds NetServer used for hosting game
            </summary>
        </member>
        <member name="M:JominiEngine.Globals_Server.GetNextGameID">
            <summary>
            Gets the next available newGameID, then increments it
            </summary>
            <returns>string containing newGameID</returns>
        </member>
        <member name="F:JominiEngine.Globals_Server.LogFile">
            <summary>
            StreamWriter for writing output to a file
            </summary>
        </member>
        <member name="M:JominiEngine.Globals_Server.logError(System.String)">
            <summary>
            Writes any errors encountered to a logfile
            </summary>
            <param name="error">The details of the error</param>
        </member>
        <member name="M:JominiEngine.Globals_Server.logEvent(System.String)">
            <summary>
            Write an event to the log file
            </summary>
            <param name="eventDetails">The details of the event</param>
        </member>
        <member name="T:JominiEngine.HexMapGraph">
            <summary>
            Class defining HexMapGraph
            </summary>
        </member>
        <member name="P:JominiEngine.HexMapGraph.mapID">
            <summary>
            Holds map ID
            </summary>
        </member>
        <member name="P:JominiEngine.HexMapGraph.myMap">
            <summary>
            Holds map object AdjacencyGraph (from QuickGraph library), 
            specifying edge type (tagged)
            </summary>
        </member>
        <member name="P:JominiEngine.HexMapGraph.costs">
            <summary>
            Dictionary holding edge costs, for use when calculating shortest path
            </summary>
        </member>
        <member name="M:JominiEngine.HexMapGraph.#ctor(System.String)">
            <summary>
            Constructor for HexMapGraph
            </summary>
            <param name="id">String holding map ID</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.#ctor(System.String,QuickGraph.TaggedEdge{JominiEngine.Fief,System.String}[])">
            <summary>
            Constructor for HexMapGraph, allowing map to be constructed from an array of edges
            </summary>
            <param name="id">String holding map ID</param>
            <param name="id">Array of edges</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.#ctor">
            <summary>
            Constructor for HexMapGraph taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.HexMapGraph.AddHexesAndRoute(JominiEngine.Fief,JominiEngine.Fief,System.String,System.Double)">
            <summary>
            Adds hex (vertex) and route (edge) in one operation.
            Existing hexes and routes will be ignored
            </summary>
            <returns>bool indicating success</returns>
            <param name="s">Source hex (Fief)</param>
            <param name="t">Target hex (Fief)</param>
            <param name="tag">String tag for route</param>
            <param name="cost">Cost for route</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.AddRoute(JominiEngine.Fief,JominiEngine.Fief,System.String,System.Double)">
            <summary>
            Adds route
            </summary>
            <returns>bool indicating success</returns>
            <param name="s">Source hex (Fief)</param>
            <param name="t">Target hex (Fief)</param>
            <param name="tag">String tag for route</param>
            <param name="cost">Cost for route</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.RemoveRoute(JominiEngine.Fief,System.String)">
            <summary>
            Removes route
            </summary>
            <returns>bool indicating success</returns>
            <param name="s">Source hex (Fief)</param>
            <param name="tag">String tag for route</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.AddHex(JominiEngine.Fief)">
            <summary>
            Adds hex (Fief)
            </summary>
            <returns>bool indicating success</returns>
            <param name="f">Hex (Fief) to add</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.RemoveHex(JominiEngine.Fief)">
            <summary>
            Removes hex (Fief)
            </summary>
            <returns>bool indicating success</returns>
            <param name="f">Hex (Fief) to remove</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.AddCost(QuickGraph.TaggedEdge{JominiEngine.Fief,System.String},System.Double)">
            <summary>
            Adds route (edge) cost to the costs collection
            </summary>
            <param name="e">Route (edge)</param>
            <param name="cost">Route cost to add</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.RemoveCost(QuickGraph.TaggedEdge{JominiEngine.Fief,System.String})">
            <summary>
            Removes route (edge) cost from the costs collection
            </summary>
            <returns>bool indicating success</returns>
            <param name="e">Route (edge)</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.CreateEdge(JominiEngine.Fief,JominiEngine.Fief,System.String)">
            <summary>
            Creates new route (edge)
            </summary>
            <returns>TaggedEdge</returns>
            <param name="s">Source hex (Fief)</param>
            <param name="t">Target hex (Fief)</param>
            <param name="tag">String tag for route</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.chooseRandomHex(JominiEngine.Fief,System.Boolean,JominiEngine.PlayerCharacter,JominiEngine.Fief)">
            <summary>
            Selects random adjoining hex (also equal chance to select current hex)
            </summary>
            <returns>Fief to move to (or null)</returns>
            <param name="from">Current fief</param>
            <param name="getOwned">bool indicating whether or not to try to return an owned fief</param>
            <param name="owner">owner, when looking for an owned fief</param>
            <param name="avoid">Fief to avoid (for retreats)</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.GetFief(JominiEngine.Fief,System.String)">
            <summary>
            Identify a route and retrieve the target fief
            </summary>
            <returns>Fief to move to (or null)</returns>
            <param name="f">Current location of NPC</param>
            <param name="direction">Direction to move (route tag)</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.GetShortestPath(JominiEngine.Fief,JominiEngine.Fief)">
            <summary>
            Identify the shortest path between 2 hexes (Fiefs)
            </summary>
            <returns>Queue of Fiefs to move to</returns>
            <param name="from">Source Fief</param>
            <param name="to">Target Fief</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.GetShortestPathString(JominiEngine.Fief,JominiEngine.Fief)">
            <summary>
            'Helper' method to identify the shortest path between 2 hexes (Fiefs),
            then to convert path into a string for visual display
            </summary>
            <returns>String to display</returns>
            <param name="from">Source Fief</param>
            <param name="to">Target Fief</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.PrintPath(JominiEngine.Fief,JominiEngine.Fief,System.Collections.Generic.IEnumerable{QuickGraph.TaggedEdge{JominiEngine.Fief,System.String}})">
            <summary>
            'Helper' method allowing shortest path to be converted to text format.
            Used by getShortestPathString method
            </summary>
            <returns>String to display</returns>
            <param name="from">Source Fief</param>
            <param name="to">Target Fief</param>
            <param name="path">Collection containing path routes (edges)</param>
        </member>
        <member name="M:JominiEngine.HexMapGraph.serialize">
            <summary>
            Serializes the current graph to GraphML format
            </summary>
        </member>
        <member name="M:JominiEngine.HexMapGraph.getStringFromEdge(QuickGraph.TaggedEdge{JominiEngine.Fief,System.String})">
            <summary>
            Returns a string representing the edge tag (used in serialization
            </summary>
            <param name="edge">Edge to get string from</param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.HexMapGraph.getIdFromFief(JominiEngine.Fief)">
            <summary>
            Returns the Fief id (used in serialization)
            </summary>
            <param name="f">Fief to get id from</param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.HexMapGraph.getFiefFromID(System.String)">
            <summary>
            Returns the Fief from the relative id
            </summary>
            <param name="id">Fief id</param>
            <returns></returns>
        </member>
        <member name="T:JominiEngine.Journal">
            <summary>
            Class allowing storage of game events (past and future)
            </summary>
        </member>
        <member name="F:JominiEngine.Journal.entries">
            <summary>
            Holds entries
            </summary>
        </member>
        <member name="F:JominiEngine.Journal.areNewEntries">
            <summary>
            Indicates presence of new (unread) entries
            </summary>
        </member>
        <member name="F:JominiEngine.Journal.priority">
            <summary>
            Priority level of new (unread) entries
            </summary>
        </member>
        <member name="M:JominiEngine.Journal.#ctor(System.Collections.Generic.SortedList{System.UInt32,JominiEngine.JournalEntry})">
            <summary>
            Constructor for Journal
            </summary>
            <param name="entList">SortedList(uint, JournalEntry) holding entries</param>
        </member>
        <member name="M:JominiEngine.Journal.CheckForUnviewedEntries">
            <summary>
            Checks to see if there are any unviewed entries in the journal
            </summary>
            <returns>bool indicating presence of unviewed entries</returns>
        </member>
        <member name="M:JominiEngine.Journal.GetEventsOnDate(System.UInt32,System.Byte)">
            <summary>
            Returns any entries matching search criteria (year, season)
            </summary>
            <returns>SortedList of JournalEntrys</returns>
            <param name="yr">Year to search for</param>
            <param name="seas">Season to search for</param>
        </member>
        <member name="M:JominiEngine.Journal.GetUnviewedEntries">
            <summary>
            Retrieves all unviewed JournalEntrys
            </summary>
            <returns>SortedList(uint, JournalEntry) containing relevant entries</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JominiEngine.Journal.GetSpecificEntries(System.String,System.String,System.String)" -->
        <member name="M:JominiEngine.Journal.AddNewEntry(JominiEngine.JournalEntry)">
            <summary>
            Adds a new JournalEntry to the Journal
            </summary>
            <returns>bool indicating success</returns>
            <param name="min">The JournalEntry to be added</param>
        </member>
        <member name="M:JominiEngine.Journal.getJournalEntrySet(System.String,System.UInt32,System.Byte)">
            <summary>
            Returns a JournalEntry set, based on criteria passed in
            </summary>
            <returns>SortedList containing JournalEntrys</returns>
            <param name="setScope">The type of JournalEvent set to fetch</param>
        </member>
        <member name="T:JominiEngine.JournalEntry">
            <summary>
            Class containing details of a Journal entry
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.jEntryID">
            <summary>
            Holds JournalEntry ID
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.year">
            <summary>
            Holds event year
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.season">
            <summary>
            Holds event season
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.personae">
            <summary>
            Holds main objects (IDs) associated with event and their role
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.type">
            <summary>
            Holds type of event (e.g. battle, birth)
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.location">
            <summary>
            Holds location of event (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.viewed">
            <summary>
            Indicates whether entry has been viewed
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.replied">
            <summary>
            Indicates whether entry has been replied to (e.g. for Proposals)
            </summary>
        </member>
        <member name="P:JominiEngine.JournalEntry.entryDetails">
            <summary>
            Holds ProtoMessage containing details of event. More flexible than strings.
            </summary>
        </member>
        <member name="M:JominiEngine.JournalEntry.#ctor(System.UInt32,System.UInt32,System.Byte,System.String[],System.String,JominiEngine.ProtoMessage,System.String)">
            <summary>
            Constructor for JournalEntry
            </summary>
            <param name="id">uint holding JournalEntry ID</param>
            <param name="yr">uint holding event year</param>
            <param name="seas">byte holding event season</param>
            <param name="pers">String[] holding main objects (IDs) associated with event and thier role</param>
            <param name="typ">String holding type of event</param>
            <param name="loc">String holding location of event (fiefID)</param>
            <param name="messageIdentifier">Enum representing description of event</param>
        </member>
        <member name="M:JominiEngine.JournalEntry.#ctor(JominiEngine.ProtoMessage,System.UInt32,System.UInt32,System.Byte,System.String[],System.String,System.String,System.String)">
            <summary>
            Create a new JournalEntry- used for more complex messages that would be more appropriate to be reconstructed on the client side
            </summary>
            <param name="m"></param>
            <param name="id"></param>
            <param name="yr"></param>
            <param name="seas"></param>
            <param name="pers"></param>
            <param name="typ"></param>
            <param name="loc"></param>
            <param name="desc"></param>
        </member>
        <member name="M:JominiEngine.JournalEntry.GetJournalEntryDetails">
            <summary>
            Returns a string containing the details of a JournalEntry
            </summary>
            <returns>JournalEntry details</returns>
        </member>
        <member name="M:JominiEngine.JournalEntry.CheckEventForPriority(JominiEngine.PlayerCharacter)">
            <summary>
            Check the level of priority for the JournalEntry
            </summary>
            <returns>byte indicating the level of priority</returns>
            <param name="jEntry">The JournalEntry</param>
        </member>
        <member name="M:JominiEngine.JournalEntry.CheckEventForInterest">
            <summary>
            Returms an array of all PlayerCharacters who may be interested in event
            (Refactored for efficiency)
            </summary>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.JournalEntry.CheckForProposal(JominiEngine.PlayerCharacter)">
            <summary>
            Check to see if the JournalEntry is a valid proposal
            </summary>
            <returns>bool indicating whether the controls be enabled</returns>
        </member>
        <member name="M:JominiEngine.JournalEntry.ReplyToProposal(System.Boolean)">
            <summary>
            Allows a character to reply to a marriage proposal
            </summary>
            <returns>bool indicating whether reply was processed successfully</returns>
            <param name="proposalAccepted">bool indicating whether proposal accepted</param>
        </member>
        <member name="M:JominiEngine.JournalEntry.ProcessEngagement">
            <summary>
            Processes the actions involved with an engagement
            </summary>
            <returns>bool indicating whether engagement was processed successfully</returns>
        </member>
        <member name="M:JominiEngine.JournalEntry.ProcessMarriage">
            <summary>
            Processes the actions involved with a marriage
            </summary>
            <returns>bool indicating whether engagement was processed successfully</returns>
        </member>
        <member name="M:JominiEngine.JournalEntry.RansomResponse(System.Boolean,JominiEngine.ProtoMessage@)">
            <summary>
            Respond to ransom demands
            </summary>
            <param name="paid">Whether or not ransom is to be paid</param>
            <returns>Bool indicating success</returns>
        </member>
        <member name="T:JominiEngine.Kingdom">
            <summary>
            Class storing data on kingdom
            </summary>
        </member>
        <member name="P:JominiEngine.Kingdom.nationality">
            <summary>
            Holds Kingdom nationality
            </summary>
        </member>
        <member name="M:JominiEngine.Kingdom.#ctor(System.String,System.String,JominiEngine.Nationality,System.String,JominiEngine.PlayerCharacter,JominiEngine.Rank)">
            <summary>
            Constructor for Kingdom
            </summary>
            <param name="nat">Kingdom's Nationality object</param>
        </member>
        <member name="M:JominiEngine.Kingdom.#ctor">
            <summary>
            Constructor for Kingdom taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Kingdom.#ctor(JominiEngine.Kingdom_Serialised)">
            <summary>
            Constructor for Kingdom using Kingdom_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="ks">Kingdom_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Kingdom.LodgeOwnershipChallenge(JominiEngine.PlayerCharacter)">
            <summary>
            Processes functions involved in lodging a new ownership (and kingship) challenge
            Returns ProtoMessage in case of error
            </summary>
        </member>
        <member name="M:JominiEngine.Kingdom.TransferOwnership(JominiEngine.PlayerCharacter)">
            <summary>
            Transfers ownership of the kingdom (and the kingship) to the specified PlayerCharacter
            </summary>
            <param name="newOwner">The new owner</param>
        </member>
        <member name="T:JominiEngine.Kingdom_Serialised">
            <summary>
            Class converting kingdom data into serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.Kingdom_Serialised.nationality">
            <summary>
            Holds nationality (ID)
            </summary>
        </member>
        <member name="M:JominiEngine.Kingdom_Serialised.#ctor(JominiEngine.Kingdom)">
            <summary>
            Constructor for Kingdom_Serialised.
            For use when serialising.
            </summary>
            <param name="king">Kingdom object to be used as source</param>
        </member>
        <member name="M:JominiEngine.Kingdom_Serialised.#ctor">
            <summary>
            Constructor for Kingdom_Serialised taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Kingdom_Serialised.#ctor(System.String,System.String,System.Byte,System.String,System.String,System.String)">
            <summary>
            Constructor for Kingdom_Serialised taking seperate values.
            For creating Kingdom_Serialised from CSV file.
            </summary>
            <param name="nat">Kingdom's Nationality object</param>
        </member>
        <member name="T:JominiEngine.Language">
            <summary>
            Class storing data on language
            </summary>
        </member>
        <member name="P:JominiEngine.Language.id">
            <summary>
            Holds language ID
            </summary>
        </member>
        <member name="P:JominiEngine.Language.baseLanguage">
            <summary>
            Holds base language
            </summary>
        </member>
        <member name="P:JominiEngine.Language.dialect">
            <summary>
            Holds language dialect code
            </summary>
        </member>
        <member name="M:JominiEngine.Language.#ctor(JominiEngine.BaseLanguage,System.Int32)">
            <summary>
            Constructor for Language
            </summary>
            <param name="bLang">BaseLanguage for the language</param>
            <param name="dial">int holding language dialect code</param>
        </member>
        <member name="M:JominiEngine.Language.#ctor">
            <summary>
            Constructor for Language taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Language.#ctor(JominiEngine.Language_Serialised)">
            <summary>
            Constructor for Language using Language_Serialised.
            For use when de-serialising.
            </summary>
            <param name="ls">Language_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Language.GetName">
            <summary>
            Gets the name of the language
            </summary>
            <returns>string containing the name</returns>
        </member>
        <member name="T:JominiEngine.BaseLanguage">
            <summary>
            Class storing base langauge data
            </summary>
        </member>
        <member name="P:JominiEngine.BaseLanguage.id">
            <summary>
            Holds base langauge ID
            </summary>
        </member>
        <member name="P:JominiEngine.BaseLanguage.name">
            <summary>
            Holds base language name
            </summary>
        </member>
        <member name="M:JominiEngine.BaseLanguage.#ctor(System.String,System.String)">
            <summary>
            Constructor for BaseLanguage
            </summary>
            <param name="id">String holding language ID</param>
            <param name="nam">String holding language name</param>
        </member>
        <member name="M:JominiEngine.BaseLanguage.#ctor">
            <summary>
            Constructor for BaseLanguage taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.Language_Serialised">
            <summary>
            Class used to convert Language to/from serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.Language_Serialised.id">
            <summary>
            Holds language ID
            </summary>
        </member>
        <member name="P:JominiEngine.Language_Serialised.baseLanguage">
            <summary>
            Holds base language
            </summary>
        </member>
        <member name="P:JominiEngine.Language_Serialised.dialect">
            <summary>
            Holds language dialect code
            </summary>
        </member>
        <member name="M:JominiEngine.Language_Serialised.#ctor(JominiEngine.Language)">
            <summary>
            Constructor for Language_Serialised
            </summary>
            <param name="pc">PlayerCharacter object to use as source</param>
        </member>
        <member name="M:JominiEngine.Language_Serialised.#ctor">
            <summary>
            Constructor for Language_Serialised taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Language_Serialised.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor for Language_Serialised taking seperate values.
            For creating Language_Serialised from CSV file.
            </summary>
            <param name="id">string holding Language ID</param>
            <param name="bLang">string holding BaseLanguage (ID)</param>
            <param name="dial">int holding language dialect code</param>
        </member>
        <member name="T:JominiEngine.LogInManager">
            <summary>
            This class handles all log in tasks, including certificate transmission and password verification.
            It may be possible to turn this class into a stand-alone application in order to create a dedicated log-in server.
            </summary>
        </member>
        <member name="F:JominiEngine.LogInManager.crypto">
            <summary>
            Used in generating random salts for use in hashing
            </summary>
        </member>
        <member name="F:JominiEngine.LogInManager.hashAlgorithm">
            <summary>
            Hashing algorithm, used for hashing passwords
            </summary>
        </member>
        <member name="F:JominiEngine.LogInManager.sessionSalts">
            <summary>
            Dictionary mapping usernames to session salts, used to ensure each user gets their own salt once connected
            </summary>
        </member>
        <member name="F:JominiEngine.LogInManager.users">
            <summary>
            Dictionary mapping player username to password hash and salt- for use during testing, should use database for final. First byte array is hash, second is salt
            </summary>
        </member>
        <member name="P:JominiEngine.LogInManager.ServerCert">
            <summary>
            The server's own X509 certificate, which clients can verify
            </summary>
        </member>
        <member name="F:JominiEngine.LogInManager.rsa">
            <summary>
            Performs RSA en/decryption
            </summary>
        </member>
        <member name="M:JominiEngine.LogInManager.GetRandomSalt(System.Int32)">
            <summary>
            Gets a random salt for use in hashing
            </summary>
            <param name="bytes">size of resulting salt</param>
            <returns>salt</returns>
        </member>
        <member name="M:JominiEngine.LogInManager.ComputeHash(System.Byte[],System.Byte[])">
            <summary>
            Computes the hash of a salt appended to source byte array
            </summary>
            <param name="toHash">bytes to be hashed</param>
            <param name="salt">salt</param>
            <returns>computed hash</returns>
        </member>
        <member name="M:JominiEngine.LogInManager.StoreNewUser(System.String,System.String)">
            <summary>
            Store a new user in the database
            </summary>
            <param name="username">Username</param>
            <param name="pass">Password. Note this isn't stored, only the hash and salt are</param>
        </member>
        <member name="M:JominiEngine.LogInManager.GetPasswordHash(System.String)">
            <summary>
            Retrieve password hash from database
            </summary>
            <param name="username">Username</param>
            <returns>password hash</returns>
        </member>
        <member name="M:JominiEngine.LogInManager.GetUserSalt(System.String)">
            <summary>
            Retrieve salt used when hashing password from database
            </summary>
            <param name="username">username</param>
            <returns>salt</returns>
        </member>
        <member name="M:JominiEngine.LogInManager.VerifyUser(System.String,System.Byte[])">
            <summary>
            Verify the identity of a user by computing and comparing password hashes
            </summary>
            <param name="username">username</param>
            <param name="userhash">hash generated by client</param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.LogInManager.AcceptConnection(JominiEngine.Client,System.String,JominiEngine.ProtoLogIn@)">
            <summary>
            Determines whether or not to accept the connection based on whether a user's username is recognised, and constructs a ProtoLogIn containing session salt
            </summary>
            <param name="client">Client who is connecting</param>
            <param name="text">Challenge text from which to create a signature</param>
            <param name="response">Response message</param>
            <returns>Boolean indicating whether connection was accepted</returns>
        </member>
        <member name="M:JominiEngine.LogInManager.Sign(System.String)">
            <summary>
            Sign a certificate
            Note that now we are allowing certificates to be unsigned for purpose of testing
            </summary>
            <author> Alejandro Campos Magencio 2008</author>
            <param name="text">String to sign</param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.LogInManager.InitialiseCertificateAndRSA(System.String)">
            <summary>
            Initialise the server certificate, and initialise the RSACryptoServiceProvider to use the server's public and private keys
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.LogInManager.ProcessLogIn(JominiEngine.ProtoLogIn,JominiEngine.Client)">
            <summary>
            Take a client's log in details, verify them and then choose to either allow the user to log in, or disconnect
            </summary>
            <param name="login">Log in details</param>
            <param name="c">Client who is logging in</param>
            <returns>Boolean indicating whether log in was successful</returns>
        </member>
        <member name="T:JominiEngine.Nationality">
            <summary>
            Class storing data on nationality
            </summary>
        </member>
        <member name="P:JominiEngine.Nationality.natID">
            <summary>
            Holds nationality ID
            </summary>
        </member>
        <member name="P:JominiEngine.Nationality.name">
            <summary>
            Holds nationality name
            </summary>
        </member>
        <member name="M:JominiEngine.Nationality.#ctor(System.String,System.String)">
            <summary>
            Constructor for Nationality
            </summary>
            <param name="id">String holding nationality ID</param>
            <param name="nam">String holding nationality name</param>
        </member>
        <member name="M:JominiEngine.Nationality.#ctor">
            <summary>
            Constructor for Nationality taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.PermissionManager">
            <summary>
            Class for permission handling
            Permissions are activity based,
            </summary>
        </member>
        <member name="M:JominiEngine.PermissionManager.isAuthorized(JominiEngine.PermissionManager.AuthorizeDelegate[],JominiEngine.PlayerCharacter,System.Object)">
            <summary>
            Determines whether a player is authorised to perform an action
            </summary>
            <param name="delegates">delegate methods for determining authorization conditions</param>
            <param name="pc">Player Character to be authorised</param>
            <param name="o">Object PlayerCharacter requires permission to act on (can be null)</param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.PermissionManager.canSeeFief(JominiEngine.PlayerCharacter,System.Object)">
            <summary>
            Method to determine if player has permission to view fief
            </summary>
            <param name="pc">PlayerCharacter who wants to view fief</param>
            <param name="o">Fief to view</param>
            <returns>Whether or not a character can see a fief</returns>
        </member>
        <member name="M:JominiEngine.PermissionManager.canSeeArmy(JominiEngine.PlayerCharacter,System.Object)">
            <summary>
            Checks whether a character can see an army
            </summary>
            <param name="pc">Head of family attempting to view army</param>
            <param name="o">Army</param>
            <returns>Whetehr or not army can be seen</returns>
        </member>
        <member name="M:JominiEngine.PermissionManager.ownsCharacter(JominiEngine.PlayerCharacter,System.Object)">
            <summary>
            Method to determine if a PlayerCharacter owns, or is, a character
            </summary>
            <param name="pc">PlayerCharacter who is/owns </param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:JominiEngine.Pillage_Siege.ProcessPillage(JominiEngine.Fief,JominiEngine.Army,System.String)">
            <summary>
            Calculates the outcome of the pillage of a fief by an army
            </summary>
            <param name="f">The fief being pillaged</param>
            <param name="a">The pillaging army</param>
            <param name="circumstance">The circumstance under which the fief is being pillaged</param>
        </member>
        <member name="M:JominiEngine.Pillage_Siege.PillageFief(JominiEngine.Army,JominiEngine.Fief)">
            <summary>
            Implements the processes involved in the pillage of a fief by an army
            </summary>
            <param name="a">The pillaging army</param>
            <param name="f">The fief being pillaged</param>
        </member>
        <member name="M:JominiEngine.Pillage_Siege.ChecksBeforePillageSiege(JominiEngine.Army,JominiEngine.Fief,JominiEngine.ProtoMessage@,System.String)">
            <summary>
            Implements conditional checks prior to the pillage or siege of a fief
            </summary>
            <returns>bool indicating whether pillage/siege can proceed</returns>
            <param name="f">The fief being pillaged/besieged</param>
            <param name="a">The pillaging/besieging army</param>
            <param name="circumstance">The circumstance - pillage or siege</param>
        </member>
        <member name="M:JominiEngine.Pillage_Siege.SiegeStart(JominiEngine.Army,JominiEngine.Fief)">
            <summary>
            Allows an attacking army to lay siege to an enemy fief
            </summary>
            <param name="attacker">The attacking army</param>
            <param name="target">The fief to be besieged</param>
        </member>
        <member name="P:JominiEngine.Place.id">
            <summary>
            Holds place ID
            </summary>
        </member>
        <member name="P:JominiEngine.Place.name">
            <summary>
            Holds place name
            </summary>
        </member>
        <member name="P:JominiEngine.Place.owner">
            <summary>
            Holds place owner (PlayerCharacter object)
            </summary>
        </member>
        <member name="P:JominiEngine.Place.titleHolder">
            <summary>
            Holds place title holder (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Place.rank">
            <summary>
            Holds place rank (Rank object)
            </summary>
        </member>
        <member name="M:JominiEngine.Place.#ctor(System.String,System.String,System.String,JominiEngine.PlayerCharacter,JominiEngine.Rank)">
            <summary>
            Constructor for Place
            </summary>
            <param name="id">String holding place ID</param>
            <param name="nam">String holding place name</param>
            <param name="tiHo">String holding place title holder (charID)</param>
            <param name="own">Place owner (PlayerCharacter)</param>
            <param name="rnk">Place rank (Rank object)</param>
        </member>
        <member name="M:JominiEngine.Place.#ctor(JominiEngine.Fief_Serialised,JominiEngine.Province_Serialised,JominiEngine.Kingdom_Serialised)">
            <summary>
            Constructor for Place using Fief_Serialised, Province_Serialised or Kingdom_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="fs">Fief_Serialised object to use as source</param>
            <param name="ps">Province_Serialised object to use as source</param>
            <param name="ks">Kingdom_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Place.#ctor">
            <summary>
            Constructor for Place taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Place.GetTitleHolder">
            <summary>
            Gets the place's title holder
            </summary>
            <returns>The title holder</returns>
        </member>
        <member name="T:JominiEngine.Place_Serialised">
            <summary>
            Class converting Place data into serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.Place_Serialised.id">
            <summary>
            Holds place ID
            </summary>
        </member>
        <member name="P:JominiEngine.Place_Serialised.name">
            <summary>
            Holds place name
            </summary>
        </member>
        <member name="P:JominiEngine.Place_Serialised.owner">
            <summary>
            Holds place owner (id)
            </summary>
        </member>
        <member name="P:JominiEngine.Place_Serialised.titleHolder">
            <summary>
            Holds place title holder (id)
            </summary>
        </member>
        <member name="P:JominiEngine.Place_Serialised.rank">
            <summary>
            Holds place rank (id)
            </summary>
        </member>
        <member name="M:JominiEngine.Place_Serialised.#ctor(JominiEngine.Kingdom,JominiEngine.Province,JominiEngine.Fief)">
            <summary>
            Constructor for Place_Serialised.
            For use when serialising.
            </summary>
            <param name="k">Kingdom object to be used as source</param>
        </member>
        <member name="M:JominiEngine.Place_Serialised.#ctor(System.String,System.String,System.Byte,System.String,System.String)">
            <summary>
            Constructor for Place_Serialised taking seperate values.
            For creating Place_Serialised from CSV file.
            </summary>
            <param name="id">String holding place ID</param>
            <param name="nam">String holding place name</param>
            <param name="own">String holding Place owner (ID)</param>
            <param name="tiHo">String holding place title holder (charID)</param>
            <param name="rnk">String holding Place rank (ID)</param>
        </member>
        <member name="F:JominiEngine.Program.game">
            <summary>
            The Game object for this test (contains and handles all game data)
            </summary>
        </member>
        <member name="F:JominiEngine.Program.server">
            <summary>
            The Server object used for this test (contains connected client information
            </summary>
        </member>
        <member name="F:JominiEngine.Program.client">
            <summary>
            The dummy Client to be used for this test
            </summary>
        </member>
        <member name="F:JominiEngine.Program.logFilePath">
            <summary>
            The location of the log file
            </summary>
        </member>
        <member name="F:JominiEngine.Program.maxMemoryUseage">
            <summary>
            Store the max memory consumption
            </summary>
        </member>
        <member name="M:JominiEngine.Program.InitialiseGameState">
            <summary>
            Set up the data and game state for the test run
            </summary>
        </member>
        <member name="M:JominiEngine.Program.FinaliseGameState">
            <summary>
            Clean up the server and close the log file
            </summary>
        </member>
        <member name="M:JominiEngine.Program.Main">
            <summary>
            Set up the game, run the TestRun (both for encrypted and unencrypted messages) and end
            </summary>
        </member>
        <member name="M:JominiEngine.Program.TestRun(System.Boolean)">
            <summary>
            Run through a sequence of actions, recording the time taken and memory consumption
            </summary>
            <param name="encrypt">Whether or not to use encryption</param>
        </member>
        <member name="M:JominiEngine.Program.LogMemory(System.Diagnostics.Process)">
            <summary>
            Logs the memory useage using GC.GetTotalMemory and returns the memory useage
            </summary>
            <param name="p">Process to use to calculate memory</param>
        </member>
        <member name="M:JominiEngine.Program.ProcessNextAction(JominiEngine.Actions,System.Diagnostics.Process)">
            <summary>
            Waits for the response to a client's action, gets the time taken to receive reply, and logs memory
            </summary>
            <param name="action">Action which was taken- will wait until a response with the same action has been received</param>
            <param name="p">Process used to get memory</param>
            <returns>Time taken (milliseconds)</returns>
        </member>
        <member name="M:JominiEngine.Program.SetUpForDemo">
            <summary>
            Code which was used in the 2015 demo- sets up a few armies, adds funds and sets a few traits to demonstrate trait effects
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoMessage">
            <summary>
            Class for translating objects to ProtoBuf constructs
            Object fields can be hidden from clients by setting the desired field to null
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoMessage.ActionType">
            <summary>
            Contains the underlying type of the message. Used identify which action the client took
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoMessage.Message">
            <summary>
            Contains a message or messageID for the client
            Used when sending error messages
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoMessage.MessageFields">
            <summary>
            Contains any fields that need to be sent along with the message
            e.g. amount of overspend in fief
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoMessage.ResponseType">
            <summary>
            Contains the server response
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoLogIn">
            <summary>
            Contains various keys and salts for logging in
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoLogIn.sessionSalt">
            <summary>
            The session salt, used to salt the password hash
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoLogIn.userSalt">
            <summary>
            The user's salt, used to salt the password hash
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoLogIn.Key">
            <summary>
            Key used in symmetric encryption. This key should be created on the client side and encrypted with the server's public key, then decrypted on the server side with the public key
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoLogIn.Text">
            <summary>
            Challenge text to be signed by server
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoLogIn.Signature">
            <summary>
            Result of server signing certificate
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoLogIn.certificate">
            <summary>
            Holds the X509 certificate as a byte array for optionally verifying the peer
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoGenericArray`1">
            <summary>
            A generic array, used to store things like detachment details or expenses
            A tricky one to serialize and deserialize, as each type used with the array must be included in the type model
            If any more types are added, be sure to include them
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:JominiEngine.ProtoClient">
            <summary>
            Class representing most frequently required client information
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoAilment">
            <summary>
            Class for serializing an Ailment
            (At present, only minimumEffect is hidden)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoAilment._AilmentID">
            <summary>
            Holds ailmentID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoAilment._description">
            <summary>
            Holds ailment description
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoAilment._when">
            <summary>
            Holds ailment date
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoAilment._effect">
            <summary>
            Holds current ailment effect
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoAilment._minimumEffect">
            <summary>
            Holds minimum ailment effect
            </summary>
        </member>
        <member name="M:JominiEngine.ProtoAilment.#ctor(JominiEngine.Ailment)">
            <summary>
            Create a ProtoAilment from an Ailment
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:JominiEngine.ProtoArmy">
            <summary>
            Class for serializing an Army
            The amount of information a player can view about an army depends on whether that player 
            ownes the army, how close the player is etc. 
            Can be tuned later to include information obtained via methods such as spying, interrogation, or defection
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.armyID">
            <summary>
            Holds army ID
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoArmy.troops">
            <summary>
            Holds troops in army
            0 = knights
            1 = menAtArms
            2 = lightCav
            3 = longbowmen
            4 = crossbowmen
            5 = foot
            6 = rabble
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.leader">
            <summary>
            Holds army leader name
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.leaderID">
            <summary>
            Holds army leader ID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.owner">
            <summary>
            Holds army owner name
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.ownerID">
            <summary>
            Gets or sets the owner's character id
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.days">
            <summary>
            Holds army's remaining days in season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.location">
            <summary>
            Holds army location in the format:
            fiefID|fiefName|provinceName|kingdomName
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.isMaintained">
            <summary>
            Indicates whether army is being actively maintained by owner
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.maintCost">
            <summary>
            Indicates the army maintenance cost
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.aggression">
            <summary>
            Indicates army's aggression level (automated response to combat)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.combatOdds">
            <summary>
            Indicates army's combat odds value (i.e. at what odds will attempt automated combat action)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.nationality">
            <summary>
            String indicating army nationality
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoArmy.siegeStatus">
            <summary>
            Holds siege status of army
            One of BESIEGING, BESIEGED, FIEF or none
            BESIEGING: army is currently besieging fief
            BESIEGED: army is under siege
            FIEF: the fief the army is in is under siege
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoCharacter">
            <summary>
            Class for sending details of a character
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.charID">
            <summary>
            Holds character ID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.firstName">
            <summary>
            Holds character's first name
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.familyName">
            <summary>
            Holds character's family name
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.birthYear">
            <summary>
            Character's year of birth
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.birthSeason">
            <summary>
            Character's birth season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.isMale">
            <summary>
            Holds if character male
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.nationality">
            <summary>
            Holds the string representation of this character's nationality
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.isAlive">
            <summary>
            Indicates whether a character is alive
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.maxHealth">
            <summary>
            Character's max health
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.health">
            <summary>
            Character's current health
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.stature">
            <summary>
            Character's stature
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.virility">
            <summary>
            Character's virility
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.inKeep">
            <summary>
            Bool detclaring whether character is in keep
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.language">
            <summary>
            Character's language ID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.days">
            <summary>
            number of days left in season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.familyID">
            <summary>
            Character's family ID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.spouse">
            <summary>
            Character spouse charID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.father">
            <summary>
            Character father charID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.mother">
            <summary>
            Character mother charID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.fiancee">
            <summary>
            Character mother charID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.location">
            <summary>
            Character location (FiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.statureModifier">
            <summary>
            Character statureModifier
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.management">
            <summary>
            Character management rating
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.combat">
            <summary>
            Character combat skill
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.traits">
            <summary>
            Holds character's traits
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.isPregnant">
            <summary>
            Bool to indicate whether char is pregnant
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.titles">
            <summary>
            Holds char's title
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.armyID">
            <summary>
            ArmyID, if char leads army
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.ailments">
            <summary>
            Character's ailments
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.goTo">
            <summary>
            IDs of Fiefs in char's GoTo list
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCharacter.captor">
            <summary>
            Holds name of captor (if is null character is not captive)
            </summary>
        </member>
        <member name="M:JominiEngine.ProtoCharacter.includeSpy(JominiEngine.Character)">
            <summary>
            Extra information gained from spying
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:JominiEngine.ProtoCharacter.onIncludeAll(JominiEngine.Character)">
            <summary>
            Method to ensure message incudes all information from inheriting classes
            </summary>
            <param name="c">Character whose details to include</param>
        </member>
        <member name="M:JominiEngine.ProtoCharacter.onIncludeSpy(JominiEngine.Character)">
            <summary>
            Method to ensure message incudes spying information from inheriting classes
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:JominiEngine.ProtoPlayerCharacter">
            <summary>
            Class for sending details of a PlayerCharacter
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.playerID">
            <summary>
            Holds ID of player who is currently playing this PlayerCharacter
            Note that list of sieges and list of armies is stored elsewhere- see ProtoSiegeList and ProtoArmyList
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.outlawed">
            <summary>
            Holds character outlawed status
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.purse">
            <summary>
            Holds character's treasury
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.myNPCs">
            <summary>
            Holds IDs and names of character's employees and family
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.myHeir">
            <summary>
            Holds details of heir
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.ownedFiefs">
            <summary>
            Holds IDs of character's owned fiefs
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.provinces">
            <summary>
            Holds IDs of character's owned provinces
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.homeFief">
            <summary>
            Holds character's home fief (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoPlayerCharacter.ancestralHomeFief">
            <summary>
            Holds character's ancestral home fief (fiefID)
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoNPC">
            <summary>
            Class for sending details of Non-PlayerCharacter
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoNPC.employer">
            <summary>
            Holds NPC's employer (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoNPC.salary">
            <summary>
            Holds NPC's salary
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoNPC.lastOfferID">
            <summary>
            Holds last wage offer from individual PCs
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoNPC.inEntourage">
            <summary>
            Denotes if in employer's entourage
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoNPC.isHeir">
            <summary>
            Denotes if is player's heir
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoFief">
            <summary>
            Class for sending fief details
            Province, language and terrain are all stored client side- unless this changes there is no need to send these
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.fiefID">
            <summary>
            ID of the fief
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.titleHolder">
            <summary>
            CharID and name of fief title holder
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.owner">
            <summary>
            Name of fief owner
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.ownerID">
            <summary>
            CharID of the fief owner
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.rank">
            <summary>
            Fief rank
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.population">
            <summary>
            Holds fief population
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.fields">
            <summary>
            Holds fief field level
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.industry">
            <summary>
            Holds fief industry level
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.troops">
            <summary>
            Holds number of troops in fief
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.militia">
            <summary>
            Holds number of troops that can be recruited in this fief
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.taxRate">
            <summary>
            Holds fief tax rate
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.taxRateNext">
            <summary>
            Holds fief tax rate (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.officialsSpendNext">
            <summary>
            Holds expenditure on officials (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.garrisonSpendNext">
            <summary>
            Holds expenditure on garrison (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.infrastructureSpendNext">
            <summary>
            Holds expenditure on infrastructure (next season)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.keepSpendNext">
            <summary>
            Holds expenditure on keep (next season)
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoFief.keyStatsCurrent">
            <summary>
            Holds key data for current season.
            0 = loyalty,
            1 = GDP,
            2 = tax rate,
            3 = official expenditure,
            4 = garrison expenditure,
            5 = infrastructure expenditure,
            6 = keep expenditure,
            7 = keep level,
            8 = income,
            9 = family expenses,
            10 = total expenses,
            11 = overlord taxes,
            12 = overlord tax rate,
            13 = bottom line
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoFief.keyStatsPrevious">
            <summary>
            Holds key data for previous season
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoFief.keyStatsNext">
            <summary>
            Holds key data for next season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.keepLevel">
            <summary>
            Holds fief keep level
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.loyalty">
            <summary>
            Holds fief loyalty
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.status">
            <summary>
            Holds fief status (calm, unrest, rebellion)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.charactersInFief">
            <summary>
            Holds overviews of characters present in fief
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.barredCharacters">
            <summary>
            Holds characters banned from keep (charIDs)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.barredNationalities">
            <summary>
            Holds nationalities banned from keep (IDs)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.ancestralOwner">
            <summary>
            Holds fief ancestral owner (PlayerCharacter object)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.bailiff">
            <summary>
            Holds fief bailiff (Character object)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.bailiffDaysInFief">
            <summary>
            Number of days the bailiff has been resident in the fief (this season)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.treasury">
            <summary>
            Holds fief treasury
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.armies">
            <summary>
            Holds overviews of armies present in the fief (armyIDs)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.hasRecruited">
            <summary>
            Identifies if recruitment has occurred in the fief in the current season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.isPillaged">
            <summary>
            Identifies if pillage has occurred in the fief in the current season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.siege">
            <summary>
            Siege (siegeID) of active siege
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoFief.gaol">
            <summary>
            List of characters held captive in fief
            </summary>
        </member>
        <member name="M:JominiEngine.ProtoFief.includeAll(JominiEngine.Fief)">
            KeyStats ( key data for season )
            0 = loyalty,
            1 = GDP,
            2 = tax rate,
            3 = official expenditure,
            4 = garrison expenditure,
            5 = infrastructure expenditure,
            6 = keep expenditure,
            7 = keep level,
            8 = income,
            9 = family expenses,
            10 = total expenses,
            11 = overlord taxes,
            12 = overlord tax rate,
            13 = bottom line
            <summary>
            Includes all data in the ProtoMessage (useful for fief 
            </summary>
            <param name="f"></param>
        </member>
        <member name="T:JominiEngine.ProtoArmyOverview">
            <summary>
            Class for summarising the important details of an army
            Can be used in conjunction with byte arrays to create a list of armies
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoCharacterOverview">
            <summary>
            Class for summarising the basic details of a character
            Can be used in conjunction with byte arrays to create a list of characters
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeOverview.siegeID">
            <summary>
            Holds siege ID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeOverview.besiegedFief">
            <summary>
            Holds fief being besieged (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeOverview.besiegingPlayer">
            <summary>
            Holds besieging player
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeOverview.defendingPlayer">
            <summary>
            Holds defending player
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.siegeID">
            <summary>
            Holds siege ID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.startYear">
            <summary>
            Holds year the siege started
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.startSeason">
            <summary>
            Holds season the siege started
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.besiegingPlayer">
            <summary>
            Holds besieging player
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.defendingPlayer">
            <summary>
            Holds defending player
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.besiegerArmy">
            <summary>
            Holds besieging army (armyID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.defenderGarrison">
            <summary>
            Holds defending garrison (armyID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.besiegedFief">
            <summary>
            Holds fief being besieged (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.days">
            <summary>
            Holds days left in current season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.startKeepLevel">
            <summary>
            Holds the keep level at the start of the siege
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.keepLevel">
            <summary>
            Holds current keep level
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.casualtiesAttacker">
            <summary>
            Casualties for attacker this round
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.casualtiesDefender">
            <summary>
            Casualties for defender this round
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.totalCasualtiesAttacker">
            <summary>
            Total casualties this siege suffered by attacker
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.totalCasualtiesDefender">
            <summary>
            Holds total casualties suffered so far by defender
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.totalDays">
            <summary>
            Holds total duration of siege so far (days)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.defenderAdditional">
            <summary>
            Holds additional defending army 
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoSiegeDisplay.endDate">
            <summary>
            Holds season and year the siege ended
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.attackerLeader">
            <summary>
            Full name of Character leading the attacking Army
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.attackerOwner">
            <summary>
            Full name of PlayerCharacter owning the attacking Army
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.defenderLeader">
            <summary>
            Full name of Character leading the defending Army
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.defenderOwner">
            <summary>
            Full name of PlayerCharacter owning the defending Army
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.battleLocation">
            <summary>
            ID of Fief where battle took place
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.battleTookPlace">
            <summary>
            Boolean indicating whether a battle took place (armies can retreat instead)
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.attackerVictorious">
            <summary>
            Boolean indicating whether the attacker was victorious
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.disbandedArmies">
            <summary>
            Holds the names of owners of all disbanded armies
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.retreatedArmies">
            <summary>
            Holds the names of owners of all retreated armies
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.deaths">
            <summary>
            Holds the full names of all Characters who died as a result of the battle
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.DefenderDeadNoHeir">
            <summary>
            If the defender leader during a siege dies, and there is no heir to take over, then even if the defenders win the siege is raised
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.siegeRaised">
            <summary>
            Boolean indicating whether the siege was raised
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.defenderCasualties">
            <summary>
            Number of troop casualties incurred for the defender
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.attackerCasualties">
            <summary>
            Number of troop casualties incurred for the attacker
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.isSiege">
            <summary>
            Boolean indicating whether or not this battle took place as a result of being a siege
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.siegeBesieger">
            <summary>
            The full name of the Character besieging
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.siegeDefender">
            <summary>
            The full name of the Character defending
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.circumstance">
            <summary>
            0 = normal battle, 1 = pillage, 2 = siege
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.statureChangeAttacker">
            <summary>
            Indicates how much stature the attacker has gained/lost
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoBattle.statureChangeDefender">
            <summary>
            Indicates how much stature the defender has gained/lost
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.jEntryID">
            <summary>
            Holds JournalEntry ID
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.year">
            <summary>
            Holds event year
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.season">
            <summary>
            Holds event season
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.personae">
            <summary>
            Holds characters associated with event and their role
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.type">
            <summary>
            Holds type of event (e.g. battle, birth)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.location">
            <summary>
            Holds location of event (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.viewed">
            <summary>
            Indicates whether entry has been viewed
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.replied">
            <summary>
            Indicates whether entry has been replied to (e.g. for Proposals)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoJournalEntry.eventDetails">
            <summary>
            Holds ProtoMessage containing details of event. More flexible than strings.
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoJournal">
            <summary>
            ProtoMessage for sending an entire Journal
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoJournal.entries">
            <summary>
            Holds entries
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoJournal.areNewEntries">
            <summary>
            Indicates presence of new (unread) entries
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoJournal.priority">
            <summary>
            Priority level of new (unread) entries
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoDetachment">
            <summary>
            Class for sending details of a detachment
            Character ID of PlayerCharacter leaving detachment is obtained via connection details
            </summary>
        </member>
        <member name="F:JominiEngine.ProtoDetachment.troops">
            <summary>
            Array of troops (size = 7)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoDetachment.leftFor">
            <summary>
            Character detachment is left for
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoDetachment.armyID">
            <summary>
            ArmyID of army from which detachment was created
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoDetachment.leftBy">
            <summary>
            Details of person who left this detachment (used in sending details of detachments to client)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoDetachment.days">
            <summary>
            Days left of person who created detachment at time of creation
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoTransfer">
            <summary>
            Class for handling the transfer of money between fiefs
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoTransferPlayer">
            <summary>
            Class for transferring money between players (player sending money obtained from connection)
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoTravelTo">
            <summary>
            Class for specifying which fief to travel to, via which route and which character
            Essentially handles TravelTo, MoveCharacter and multimoves
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoRecruit">
            <summary>
            Class for storing recruitment information
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoRecruit.armyID">
            <summary>
            Army ID of army to recruit into (null = new army)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoRecruit.amount">
            <summary>
            Amount of troops to recruit
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoRecruit.isConfirm">
            <summary>
            Bool representing whether the player has confirmed that they are happy to purchase troops
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoRecruit.treasury">
            <summary>
            Holds amount in player's treasury, in the event that game has to send fail message to client
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoCombatValues">
            <summary>
            Class for sending combat values (bytes)
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCombatValues.aggression">
            <summary>
            Army aggression value
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCombatValues.odds">
            <summary>
            Army combat odds
            </summary>
        </member>
        <member name="P:JominiEngine.ProtoCombatValues.armyID">
            <summary>
            Army whose combat values are to be adjusted
            </summary>
        </member>
        <member name="T:JominiEngine.ProtoPlayer">
            <summary>
            Class summarising player information (for use in listing players)
            </summary>
        </member>
        <member name="T:JominiEngine.Province">
            <summary>
            Class storing data on province
            </summary>
        </member>
        <member name="P:JominiEngine.Province.taxRate">
            <summary>
            Holds province tax rate
            </summary>
        </member>
        <member name="P:JominiEngine.Province.kingdom">
            <summary>
            Holds province kingdom object
            </summary>
        </member>
        <member name="M:JominiEngine.Province.#ctor(System.String,System.String,System.Double,System.String,JominiEngine.PlayerCharacter,JominiEngine.Kingdom,JominiEngine.Rank)">
            <summary>
            Constructor for Province
            </summary>
            <param name="otax">Double holding province tax rate</param>
            <param name="king">Province's Kingdom object</param>
        </member>
        <member name="M:JominiEngine.Province.#ctor">
            <summary>
            Constructor for Province taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Province.#ctor(JominiEngine.Province_Serialised)">
            <summary>
            Constructor for Province using Province_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="ps">Province_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Province.LodgeOwnershipChallenge(JominiEngine.PlayerCharacter)">
            <summary>
            Processes functions involved in lodging a new ownership challenge
            </summary>
            <param name="challenger">PlayerCharacter challenging for ownership</param>
        </member>
        <member name="M:JominiEngine.Province.AdjustTaxRate(System.Double)">
            <summary>
            Adjusts province tax rate
            </summary>
            <param name="tx">double containing new tax rate</param>
        </member>
        <member name="M:JominiEngine.Province.GetRightfulKingdom">
            <summary>
            Gets the province's rightful kingdom (i.e. the kingdom that it traditionally belongs to)
            </summary>
            <returns>The kingdom</returns>
        </member>
        <member name="M:JominiEngine.Province.GetCurrentKingdom">
            <summary>
            Gets the province's current kingdom (i.e. the kingdom of the current owner)
            </summary>
            <returns>The kingdom</returns>
        </member>
        <member name="M:JominiEngine.Province.TransferOwnership(JominiEngine.PlayerCharacter)">
            <summary>
            Transfers ownership of the province to the specified PlayerCharacter
            </summary>
            <param name="newOwner">The new owner</param>
        </member>
        <member name="T:JominiEngine.Province_Serialised">
            <summary>
            Class converting province data into serialised format suitable (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.Province_Serialised.taxRate">
            <summary>
            Holds province tax rate
            </summary>
        </member>
        <member name="P:JominiEngine.Province_Serialised.kingdom">
            <summary>
            Holds province kingdom (ID)
            </summary>
        </member>
        <member name="M:JominiEngine.Province_Serialised.#ctor(JominiEngine.Province)">
            <summary>
            Constructor for Province_Serialised.
            For use when serialising.
            </summary>
            <param name="prov">Province object to be used as source</param>
        </member>
        <member name="M:JominiEngine.Province_Serialised.#ctor(System.String,System.String,System.Byte,System.Double,System.String,System.String,System.String)">
            <summary>
            Constructor for Province_Serialised taking seperate values.
            For creating Province_Serialised from CSV file.
            </summary>
            <param name="otax">Double holding province tax rate</param>
            <param name="king">string holding Province's Kingdom (id)</param>
        </member>
        <member name="M:JominiEngine.Province_Serialised.#ctor">
            <summary>
            Constructor for Province_Serialised taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.Rank">
            <summary>
            Class storing data on rank and title
            </summary>
        </member>
        <member name="P:JominiEngine.Rank.id">
            <summary>
            Holds rank ID
            </summary>
        </member>
        <member name="P:JominiEngine.Rank.title">
            <summary>
            Holds title name in various languages
            </summary>
        </member>
        <member name="P:JominiEngine.Rank.stature">
            <summary>
            Holds base stature for this rank
            </summary>
        </member>
        <member name="M:JominiEngine.Rank.#ctor(System.Byte,JominiEngine.TitleName[],System.Byte)">
            <summary>
            Constructor for Rank
            </summary>
            <param name="id">byte holding rank ID</param>
            <param name="ti">TitleName[] holding title name in various languages</param>
            <param name="stat">byte holding base stature for rank</param>
        </member>
        <member name="M:JominiEngine.Rank.#ctor(JominiEngine.Position_Serialised)">
            <summary>
            Constructor for Rank using Position_Serialised object
            For use when de-serialising
            </summary>
            <param name="ps">Position_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Rank.#ctor">
            <summary>
            Constructor for Rank taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Rank.GetName(JominiEngine.Language)">
            <summary>
            Gets the correct name for the rank depending on the specified Language
            </summary>
            <returns>string containing the name</returns>
            <param name="l">The Language to be used</param>
        </member>
        <member name="T:JominiEngine.Position">
            <summary>
            Class storing data on positions of power
            </summary>
        </member>
        <member name="P:JominiEngine.Position.officeHolder">
            <summary>
            Holds ID of the office holder
            </summary>
        </member>
        <member name="P:JominiEngine.Position.nationality">
            <summary>
            Holds nationality associated with the position
            </summary>
        </member>
        <member name="M:JominiEngine.Position.#ctor(System.Byte,JominiEngine.TitleName[],System.Byte,System.String,JominiEngine.Nationality)">
            <summary>
            Constructor for Position
            </summary>
            <param name="holder">string holding ID of the office holder</param>
            <param name="nat">Nationality associated with the position</param>
        </member>
        <member name="M:JominiEngine.Position.#ctor(JominiEngine.Position_Serialised)">
            <summary>
            Constructor for Position using Position_Serialised object.
            For use when de-serialising.
            </summary>
            <param name="ps">Position_Serialised object to use as source</param>
        </member>
        <member name="M:JominiEngine.Position.#ctor">
            <summary>
            Constructor for Position taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Position.BestowPosition(JominiEngine.PlayerCharacter)">
            <summary>
            Inserts the supplied PlayerCharacter's ID into the Position's officeHolder variable 
            </summary>
            <param name="newPositionHolder">PlayerCharacter being assigned to the Position</param>
        </member>
        <member name="M:JominiEngine.Position.RemoveFromOffice(JominiEngine.PlayerCharacter)">
            <summary>
            Removes the supplied PlayerCharacter's ID from the Position's officeHolder variable 
            </summary>
            <param name="pc">PlayerCharacter being removed from the Position</param>
        </member>
        <member name="M:JominiEngine.Position.GetKingdom">
            <summary>
            Gets the Kingdom associated with the position 
            </summary>
            <returns>The Kingdom</returns>
        </member>
        <member name="M:JominiEngine.Position.GetOfficeHolder">
            <summary>
            Gets the position's current office holder
            </summary>
            <returns>The office holder (PlayerCharacter)</returns>
        </member>
        <member name="T:JominiEngine.Position_Serialised">
            <summary>
            Class used to convert Position to/from serialised format (JSON)
            </summary>
        </member>
        <member name="P:JominiEngine.Position_Serialised.id">
            <summary>
            Holds ID
            </summary>
        </member>
        <member name="P:JominiEngine.Position_Serialised.title">
            <summary>
            Holds title name in various languages
            </summary>
        </member>
        <member name="P:JominiEngine.Position_Serialised.stature">
            <summary>
            Holds base stature for this rank
            </summary>
        </member>
        <member name="P:JominiEngine.Position_Serialised.officeHolder">
            <summary>
            Holds ID of the office holder
            </summary>
        </member>
        <member name="P:JominiEngine.Position_Serialised.nationality">
            <summary>
            Holds ID of Nationality associated with the position
            </summary>
        </member>
        <member name="M:JominiEngine.Position_Serialised.#ctor(JominiEngine.Position)">
            <summary>
            Constructor for Position_Serialised
            </summary>
            <param name="pos">Position object to use as source</param>
        </member>
        <member name="M:JominiEngine.Position_Serialised.#ctor(System.Byte,JominiEngine.TitleName[],System.Byte,System.String,System.String)">
            <summary>
            Constructor for Position_Serialised taking seperate values.
            For creating Position_Serialised from CSV file.
            </summary>
            <param name="id">byte holding Position ID</param>
            <param name="ti">title name in various languages</param>
            <param name="stat">byte holding stature for this position</param>
            <param name="holder">string ID of the office holder</param>
            <param name="nat">string holding ID of Nationality associated with the position</param>
        </member>
        <member name="M:JominiEngine.Position_Serialised.#ctor">
            <summary>
            Constructor for Position_Serialised taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.TitleName">
            <summary>
            Struct storing data on title name
            </summary>
        </member>
        <member name="F:JominiEngine.TitleName.langID">
            <summary>
            Holds Language ID or "generic"
            </summary>
        </member>
        <member name="F:JominiEngine.TitleName.name">
            <summary>
            Holds title name associated with specific language
            </summary>
        </member>
        <member name="M:JominiEngine.TitleName.#ctor(System.String,System.String)">
            <summary>
            Constructor for TitleName
            </summary>
            <param name="lang">string holding Language ID</param>
            <param name="nam">string holding title name associated with specific language</param>
        </member>
        <member name="T:JominiEngine.Server">
            <summary>
            The Server- accepts connections, keeps track of connected clients, deserialises incoming messages and sends message to clients
            </summary>
        </member>
        <member name="F:JominiEngine.Server.clientConnections">
            <summary>
            Contains the connection and Client object of all connected, but not necessarily logged in, clients
            </summary>
        </member>
        <member name="F:JominiEngine.Server.ctSource">
            <summary>
            Cancellation token- used to abort listening thread
            </summary>
        </member>
        <member name="F:JominiEngine.Server.ServerLock">
            <summary>
            Lock used to ensure list of connected clients is consistent
            </summary>
        </member>
        <member name="M:JominiEngine.Server.ContainsConnection(System.String)">
            <summary>
            Check if client connections contains a username- used in testing
            </summary>
            <param name="user">username of client</param>
            <returns>True if there is a connection, false if otherwise</returns>
        </member>
        <member name="M:JominiEngine.Server.initialise">
            <summary>
            Initialise the server, and store some test users and clients.
            </summary>
        </member>
        <member name="M:JominiEngine.Server.Listen">
            <summary>
            Server listening thread- accepts connections, receives messages, deserializes them and hands them to ProcessMessage
            </summary>
        </member>
        <member name="M:JominiEngine.Server.SendViaProto(JominiEngine.ProtoMessage,Lidgren.Network.NetConnection,Lidgren.Network.NetEncryption)">
            <summary>
            Sends a message by serializing with ProtoBufs
            </summary>
            <param name="m">Message to be sent</param>
            <param name="conn">Connection to send across</param>
            <param name="alg">Optional encryption algorithm</param>
        </member>
        <member name="M:JominiEngine.Server.ProcessMessage(JominiEngine.ProtoMessage,Lidgren.Network.NetConnection)">
            <summary>
            Read a message, get the relevant reply and send to client
            </summary>
            <param name="m">Deserialised message from client</param>
            <param name="connection">Client's connecton</param>
        </member>
        <member name="M:JominiEngine.Server.#ctor">
            <summary>
            Initialise and start the server
            </summary>
        </member>
        <member name="M:JominiEngine.Server.Disconnect(Lidgren.Network.NetConnection)">
            <summary>
            Processes a client disconnecting from the server- removes the client as an observer, removes their connection and deletes their CryptoServiceProvider
            </summary>
            <param name="conn">Connection of the client who disconnected</param>
        </member>
        <member name="M:JominiEngine.Server.Shutdown">
            <summary>
            Shut down the server and cancels the server's token, which should stop all client tasks
            </summary>
        </member>
        <member name="T:JominiEngine.Siege">
            <summary>
            Class storing data on a siege
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.siegeID">
            <summary>
            Holds siege ID
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.startYear">
            <summary>
            Holds year the siege started
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.startSeason">
            <summary>
            Holds season the siege started
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.besiegingPlayer">
            <summary>
            Holds besieging player (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.defendingPlayer">
            <summary>
            Holds defending player (charID)
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.besiegerArmy">
            <summary>
            Holds besieging army (armyID)
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.defenderGarrison">
            <summary>
            Holds defending garrison (armyID)
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.besiegedFief">
            <summary>
            Holds fief being besieged (fiefID)
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.days">
            <summary>
            Holds days left in current season
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.startKeepLevel">
            <summary>
            Holds the keep level at the start of the siege
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.totalCasualtiesAttacker">
            <summary>
            Holds total casualties suffered so far by attacker
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.totalCasualtiesDefender">
            <summary>
            Holds total casualties suffered so far by defender
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.totalDays">
            <summary>
            Holds total duration of siege so far (days)
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.defenderAdditional">
            <summary>
            Holds additional defending army (armyID)
            </summary>
        </member>
        <member name="P:JominiEngine.Siege.endDate">
            <summary>
            Holds season and year the siege ended
            </summary>
        </member>
        <member name="M:JominiEngine.Siege.#ctor(System.String,System.UInt32,System.Byte,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.String,System.String)">
            <summary>
            Constructor for Siege
            </summary>
            <param name="id">String holding ID of siege</param>
            <param name="startYr">uint holding year the siege started</param>
            <param name="startSeas">byte holding season the siege started</param>
            <param name="bsgPlayer">String holding besieging player (charID)</param>
            <param name="defPlayer">String holding defending player (charID)</param>
            <param name="bsgArmy">String holding besieging army (armyID)</param>
            <param name="defGarr">String holding defending garrison (armyID)</param>
            <param name="fief">String holding fief being besieged (fiefID)</param>
            <param name="day">double containing days left in current season</param>
            <param name="kpLvl">double containing the keep level at the start of the siege</param>
            <param name="totAtt">int containing total attacker casualties so far</param>
            <param name="totDef">int containing total defender casualties so far</param>
            <param name="totday">double containing days used by siege so far</param>
            <param name="defAdd">String holding additional defending army (armyID)</param>
            <param name="end">string holding season and year the siege ended</param>
        </member>
        <member name="M:JominiEngine.Siege.#ctor">
            <summary>
            Constructor for Siege taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.Siege.GetFief">
            <summary>
            Gets the fief being besieged
            </summary>
            <returns>The besieged fief</returns>
        </member>
        <member name="M:JominiEngine.Siege.GetBesiegingArmy">
            <summary>
            Gets the besieging army
            </summary>
            <returns>The besieging army</returns>
        </member>
        <member name="M:JominiEngine.Siege.GetDefenderGarrison">
            <summary>
            Gets the defending garrison
            </summary>
            <returns>The defending garrison (Army)</returns>
        </member>
        <member name="M:JominiEngine.Siege.GetDefenderAdditional">
            <summary>
            Gets the additional defending army
            </summary>
            <returns>The additional defending army</returns>
        </member>
        <member name="M:JominiEngine.Siege.GetDefendingPlayer">
            <summary>
            Gets the defending player
            </summary>
            <returns>The defending player</returns>
        </member>
        <member name="M:JominiEngine.Siege.GetBesiegingPlayer">
            <summary>
            Gets the besieging player
            </summary>
            <returns>The besieging player</returns>
        </member>
        <member name="M:JominiEngine.Siege.SyncSiegeDays(System.Double,System.Boolean)">
            <summary>
            Synchronises days for component objects
            </summary>
            <param name="newDays">double indicating new value for days</param>
            <param name="checkForAttrition">bool indicating whether to check for attrition</param>
        </member>
        <member name="M:JominiEngine.Siege.CheckAttritionApplies">
            <summary>
            Checks to see if attrition applies to the defending forces (based on bailiff management rating)
            </summary>
            <returns>bool indicating whether attrition applies</returns>
        </member>
        <member name="M:JominiEngine.Siege.UpdateSiege">
            <summary>
            Updates siege at the end/beginning of the season
            </summary>
            <returns>bool indicating whether the siege has been dismantled</returns>
        </member>
        <member name="M:JominiEngine.Siege.SiegeEnd(System.Boolean,JominiEngine.DisplayMessages,System.String[])">
            <summary>
            Ends the siege
            </summary>
            <param name="siegeSuccessful">bool indicating whether the siege was successful</param>
            <param name="s">String containing circumstances under which the siege ended</param>
        </member>
        <member name="M:JominiEngine.Siege.DisplaySiegeData">
            <summary>
            Retrieves information for Siege display screen
            </summary>
            <returns>String containing information to display</returns>
        </member>
        <member name="M:JominiEngine.Siege.ChecksBeforeSiegeOperation(JominiEngine.ProtoMessage@,System.String)">
            <summary>
            Implements conditional checks prior to a siege operation
            </summary>
            <returns>bool indicating whether siege operation can proceed</returns>
            <param name="operation">The operation - round or end</param>
        </member>
        <member name="M:JominiEngine.Siege.SiegeStormRound(System.UInt32,System.Double)">
            <summary>
            Processes the storming of the keep by attacking forces in the siege
            </summary>
            <param name="defenderCasualties">Defender casualties sustained during the reduction phase</param>
            <param name="originalKeepLvl">Keep level prior to the reduction phase</param>
        </member>
        <member name="M:JominiEngine.Siege.SiegeNegotiationRound(System.UInt32,System.Double)">
            <summary>
            Processes a single negotiation round of the siege
            </summary>
            <returns>bool indicating whether negotiation was successful</returns>
            <param name="defenderCasualties">Defender casualties sustained during the reduction phase</param>
            <param name="originalKeepLvl">Keep level prior to the reduction phase</param>
        </member>
        <member name="M:JominiEngine.Siege.SiegeReductionRound(System.String)">
            <summary>
            Processes a single reduction round of the siege
            </summary>
            <param name="type">The type of round - storm, negotiate, reduction (default)</param>
        </member>
        <member name="T:JominiEngine.Terrain">
            <summary>
            Class storing data on terrain
            </summary>
        </member>
        <member name="P:JominiEngine.Terrain.id">
            <summary>
            Holds terrain ID
            </summary>
        </member>
        <member name="P:JominiEngine.Terrain.description">
            <summary>
            Holds terrain description
            </summary>
        </member>
        <member name="P:JominiEngine.Terrain.travelCost">
            <summary>
            Holds terrain travel cost
            </summary>
        </member>
        <member name="M:JominiEngine.Terrain.#ctor(System.String,System.String,System.Double)">
            <summary>
            Constructor for Terrain
            </summary>
            <param name="id">String holding terrain code</param>
            <param name="desc">String holding terrain description</param>
            <param name="tc">double holding terrain travel cost</param>
        </member>
        <member name="M:JominiEngine.Terrain.#ctor">
            <summary>
            Constructor for Terrain taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.ExamineArmies(System.String)">
            <summary>
            Examine all armies in a fief. Note: Must have a character in that fief
            </summary>
            <param name="fiefID">ID of fief to view</param>
        </member>
        <member name="M:JominiEngine.TestClient.RecruitTroops(System.String,System.UInt32,System.Boolean)">
            <summary>
            Recruit some troops for one of your armies
            </summary>
            <param name="armyID">ID of army to recruit for (will recruit from that army leader's location</param>
            <param name="numTroops">Number of troops to recruit</param>
            <param name="isConfirm">Boolean indicating that this message is confirming these details- will be changed once message sequences are established</param>
        </member>
        <member name="M:JominiEngine.TestClient.MaintainArmy(System.String)">
            <summary>
            Maintain the army indicated by the army ID
            </summary>
            <param name="armyID">Army to maintain</param>
        </member>
        <member name="M:JominiEngine.TestClient.AppointArmyLeader(System.String,System.String)">
            <summary>
            Appoint a new army leader
            </summary>
            <param name="armyID">ID of army to appoint leader to</param>
            <param name="charID">Character ID of character to become leader</param>
        </member>
        <member name="M:JominiEngine.TestClient.DisbandArmy(System.String)">
            <summary>
            Disband an army
            </summary>
            <param name="armyID">ID of army to disband</param>
        </member>
        <member name="M:JominiEngine.TestClient.DropOffTroops(System.String,System.String,System.UInt32[])">
            <summary>
            Creates an army detachment to leave for a player
            </summary>
            <param name="armyID">ID of army to create a detachment from</param>
            <param name="playerID">ID of player to leave detachment for</param>
            <param name="troops">Number of troops to leave
            
            0 = knights
            1 = menAtArms
            2 = lightCav
            3 = longbowmen
            4 = crossbowmen
            5 = foot
            6 = rabble</param>
        </member>
        <member name="M:JominiEngine.TestClient.ListDetachments(System.String)">
            <summary>
            List the detachments available for an army
            </summary>
            <param name="armyID">ID of army to list detachments available for. Will return detachments based on army owner and army location</param>
        </member>
        <member name="M:JominiEngine.TestClient.PickUpDetachments(System.String[],System.String)">
            <summary>
            Pick up selected attachments and add them to an army
            </summary>
            <param name="selectedDetachments">Array of detachment IDs to add</param>
            <param name="armyID">ID of army to add detachments to</param>
        </member>
        <member name="M:JominiEngine.TestClient.AdjustOddsAndAgression(System.String,System.Byte,System.Byte)">
            <summary>
            Adjust the combat odds and agression values for a particular army
            </summary>
            <param name="armyID">ID of army to adjust for</param>
            <param name="newOdds">Combat odds value</param>
            <param name="newAgg">Aggression value</param>
        </member>
        <member name="M:JominiEngine.TestClient.GetSiegeList">
            <summary>
            Get list of sieges you are currently involved in, whether as a besieger or defender
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.GetSiege(System.String)">
            <summary>
            Get more in-depth information on a siege
            </summary>
            <param name="siegeID">ID of siege</param>
        </member>
        <member name="M:JominiEngine.TestClient.PillageFief(System.String,System.String)">
            <summary>
            Pillage a fief
            </summary>
            <param name="fiefID">ID of fief to pillage</param>
            <param name="armyID">ID of army to be pillaging</param>
        </member>
        <member name="M:JominiEngine.TestClient.Besiege(System.String)">
            <summary>
            Besiege the fief your army is currently in
            </summary>
            <param name="armyID">ID of army who will be besieging</param>
        </member>
        <member name="M:JominiEngine.TestClient.StormRound(System.String)">
            <summary>
            Conduct a storm round during this siege
            </summary>
            <param name="siegeID">ID of siege</param>
        </member>
        <member name="M:JominiEngine.TestClient.NegotiationRound(System.String)">
            <summary>
            Conduct a negotiation round during this siege
            </summary>
            <param name="siegeID">ID of siege</param>
        </member>
        <member name="M:JominiEngine.TestClient.ReductionRound(System.String)">
            <summary>
            Conduct a reduction round during this siege
            </summary>
            <param name="siegeID">ID of siege</param>
        </member>
        <member name="M:JominiEngine.TestClient.EndSiege(System.String)">
            <summary>
            End the siege
            </summary>
            <param name="siegeID">ID of siege</param>
        </member>
        <member name="M:JominiEngine.TestClient.LogInAndConnect(System.String,System.String,System.Byte[])">
            <summary>
            Log in to the server
            </summary>
            <param name="user">Username</param>
            <param name="pass">Password</param>
        </member>
        <member name="M:JominiEngine.TestClient.ClearMessageQueues">
            <summary>
            Clear both message queues- used in tests where we don't care about the login messages
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.SwitchCharacter(System.String)">
            <summary>
            Switch to commanding a different character
            </summary>
            <param name="charID">ID of character to control. Must own the character, and character must not be captured/dead</param>
        </member>
        <member name="M:JominiEngine.TestClient.CheckForProtobufMessage">
            <summary>
            Gets the next message from the server by repeatedly polling the message queue. 
            </summary>
            <returns>Message from server</returns>
            <throws>TaskCanceledException if task is cancelled</throws>
        </member>
        <member name="M:JominiEngine.TestClient.CheckForStringMessage">
            <summary>
            Gets the next message from the server by repeatedly polling the message queue
            </summary>
            <returns>Message from server</returns>
            <throws>TaskCanceledException if task is cancelled</throws>
        </member>
        <member name="M:JominiEngine.TestClient.GetReply(System.String)">
            <summary>
            Gets the next message recieved from the server
            </summary>
            <returns>Task containing the reply as a result</returns>
        </member>
        <member name="M:JominiEngine.TestClient.GetServerMessage">
            <summary>
            Gets the next message recieved from the server
            </summary>
            <returns>Task containing the reply as a result</returns>
        </member>
        <member name="M:JominiEngine.TestClient.SeasonUpdate">
            <summary>
            Request that a season update be performed. Note that this is an admin command
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.ViewCharacter(System.String)">
            <summary>
            View a character
            </summary>
            <param name="charID">ID of character to view</param>
        </member>
        <member name="M:JominiEngine.TestClient.Move(System.String,System.String,System.String[])">
            <summary>
            Move a character to a chosen location
            </summary>
            <param name="character">Character ID</param>
            <param name="location">Location ID</param>
        </member>
        <member name="M:JominiEngine.TestClient.Camp(System.Int32,System.String)">
            <summary>
            Camp for a number of days at the character's location
            </summary>
            <param name="days">Number of days to camp for</param>
            <param name="charID">Character to camp. If character is leading an army, army will camp too</param>
        </member>
        <member name="M:JominiEngine.TestClient.GetNPCList(System.String,System.String,System.String)">
            <summary>
            Get the potential candidates for a selected type and role
            </summary>
            <param name="type">One of "Grant"</param>
            <param name="role">One of "leader", "bailiff"</param>
            <param name="itemID">ID of item to which role will be granted (e.g. armyID)</param>
        </member>
        <member name="M:JominiEngine.TestClient.EnterExitKeep(System.String)">
            <summary>
            Enter the keep if not already inside; exit the keep if already inside
            </summary>
            <param name="charID">ID of character to enter/exit keep</param>
        </member>
        <member name="M:JominiEngine.TestClient.ListCharactersInPlace(System.String,System.String)">
            <summary>
            List all the characters in a place based on a character's location
            </summary>
            <param name="charID">charID of character whose location to use</param>
            <param name="place">One of "court", "tavern", or "outside"</param>
        </member>
        <member name="M:JominiEngine.TestClient.ViewCaptives">
            <summary>
            View all captives you own
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.ViewCaptives(System.String)">
            <summary>
            View captives kept in fief's gaol
            </summary>
            <param name="fiefID">ID of fief to view captives in</param>
        </member>
        <member name="M:JominiEngine.TestClient.GetCaptive(System.String)">
            <summary>
            View details on a single captive
            </summary>
            <param name="captiveID">ID of captive to view</param>
        </member>
        <member name="M:JominiEngine.TestClient.ReleaseCaptive(System.String)">
            <summary>
            Release a captive 
            </summary>
            <param name="charID">ID of captive to release</param>
        </member>
        <member name="M:JominiEngine.TestClient.ExecuteCaptive(System.String)">
            <summary>
            Execute a captive
            </summary>
            <param name="charID">ID of character to execute</param>
        </member>
        <member name="M:JominiEngine.TestClient.RansomCaptive(System.String)">
            <summary>
            Ranson a captive (amount to ransom for is calculated based on character value on server side)
            </summary>
            <param name="charID">ID of character to ransom</param>
        </member>
        <member name="M:JominiEngine.TestClient.SpyOnFief(System.String,System.String)">
            <summary>
            Spy on a fief
            </summary>
            <param name="charID">ID of character to be spying</param>
            <param name="fiefID">ID of target fief to spy on</param>
        </member>
        <member name="M:JominiEngine.TestClient.NameHeir(System.String)">
            <summary>
            Name a new heir
            </summary>
            <param name="charID">ID of character to be heir. Must be a male family member of correct age</param>
        </member>
        <member name="M:JominiEngine.TestClient.Marry(System.String,System.String)">
            <summary>
            Propose marriage between two characters
            </summary>
            <param name="groomID">character ID of the groom</param>
            <param name="brideID">character ID of the bride</param>
        </member>
        <member name="M:JominiEngine.TestClient.TryForChild(System.String)">
            <summary>
            Attempt to produce an offspring
            </summary>
            <param name="charID">ID of character who will be trying for a child. Must be a male family member with a spouse</param>
        </member>
        <member name="M:JominiEngine.TestClient.GetFiefList">
            <summary>
            Get a list of all owned fiefs
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.ViewFief(System.String)">
            <summary>
            View in-depth information about a fief. Amount of information depends on whether player owns fief or not
            </summary>
            <param name="fiefID">ID of fief to view</param>
        </member>
        <member name="M:JominiEngine.TestClient.AppointBailiff(System.String,System.String)">
            <summary>
            Appoint a new bailiff for a fief
            </summary>
            <param name="charID">ID of character to become bailiff</param>
            <param name="fiefID">Fief ID</param>
        </member>
        <member name="M:JominiEngine.TestClient.RemoveBailiff(System.String)">
            <summary>
            Remove the bailiff of a fief from his appointed position
            </summary>
            <param name="fiefID">ID of fief</param>
        </member>
        <member name="M:JominiEngine.TestClient.TransferFunds(System.Int32,System.String,System.Boolean)">
            <summary>
            Transfers funds to or from the home fief
            </summary>
            <param name="amount">Amount to transfer</param>
            <param name="fiefID">ID of fief to transfer to/from</param>
            <param name="toHome">Indicates whether funds will be transferred to home fief or from home fief to fief indicated in fiefID</param>
        </member>
        <member name="M:JominiEngine.TestClient.GetPlayerList">
            <summary>
            Get a list of other players (useful for transferring funds)
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.TransferFundsToPlayer(System.Int32,System.String)">
            <summary>
            Transfer funds to another player (home fief treasury to home fief treasury)
            </summary>
            <param name="amount">Amount to send</param>
            <param name="playerID">ID/Username of player to transfer to</param>
        </member>
        <member name="M:JominiEngine.TestClient.AdjustExpenditure(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adjust this fief's expenditure
            </summary>
            <param name="fiefID">ID of fief</param>
            <param name="newTax">new Tax value</param>
            <param name="newOff">new Official spend value</param>
            <param name="newGarr">new Garrison spend value</param>
            <param name="newKeep">new Keep spend value</param>
            <param name="newInfra">ew Infrastructure spend value</param>
        </member>
        <member name="M:JominiEngine.TestClient.AutoAdjustExpenditure(System.String)">
            <summary>
            Auto-adjusts the overspend for a fief
            </summary>
            <param name="fiefID">ID of fief</param>
        </member>
        <member name="M:JominiEngine.TestClient.BarCharacter(System.String,System.String)">
            <summary>
            Bar a character from the fief
            </summary>
            <param name="fiefID">ID of fief</param>
            <param name="charID">ID of character to be barred</param>
        </member>
        <member name="M:JominiEngine.TestClient.UnbarCharacter(System.String,System.String)">
            <summary>
            Unbar a character from the fief
            </summary>
            <param name="fiefID">ID of fief</param>
            <param name="charID">ID of character</param>
        </member>
        <member name="F:JominiEngine.TestClient.Network.key">
            <summary>
            Optional- set encryption key manually for use in testing
            </summary>
        </member>
        <member name="M:JominiEngine.TestClient.Network.ComputeHash(System.Byte[],System.Byte[])">
            <summary>
            Computes the hash of a salt appended to source byte array
            </summary>
            <param name="toHash">bytes to be hashed</param>
            <param name="salt">salt</param>
            <returns>computed hash</returns>
        </member>
        <member name="M:JominiEngine.TestClient.Network.ValidateCertificateAndCreateKey(JominiEngine.ProtoLogIn,System.Byte[]@)">
            <summary>
            Validates the certificate supplied by the server, and also creates a symmetric encryption key
            </summary>
            <returns><c>true</c>, if certificate was validated, <c>false</c> otherwise.</returns>
            <param name="login">ProtoLogin containing certificate</param>
        </member>
        <member name="T:JominiEngine.ConcurrentQueueWithEvent`1">
            <summary>
            Extends the ConcurrentQueue to fire an event whenever a new item is enqueued
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JominiEngine.ConcurrentQueueWithEvent`1.Enqueue(`0)">
            <summary>
            Add a new item to the queue and set the EventWaitHandle
            </summary>
            <param name="t">Item to be enqueued</param>
        </member>
        <member name="T:JominiEngine.Trait">
            <summary>
            Class storing data on a Trait
            </summary>
        </member>
        <member name="P:JominiEngine.Trait.id">
            <summary>
            Holds trait ID
            </summary>
        </member>
        <member name="P:JominiEngine.Trait.name">
            <summary>
            Holds strait name
            </summary>
        </member>
        <member name="F:JominiEngine.Trait.effects">
            <summary>
            Holds trait effects
            </summary>
        </member>
        <member name="M:JominiEngine.Trait.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{JominiEngine.Globals_Game.Stats,System.Double})">
            <summary>
            Constructor for Trait
            </summary>
            <param name="id">String holding trait ID</param>
            <param name="nam">String holding trait name</param>
            <param name="effs">Dictionary(string, double) holding trait effects</param>
        </member>
        <member name="M:JominiEngine.Trait.#ctor">
            <summary>
            Constructor for Trait taking no parameters.
            For use when de-serialising.
            </summary>
        </member>
        <member name="T:JominiEngine.Utility_Methods">
            <summary>
            Methods used throughout the JominiEngine- includes ID verification and retrieving objects from IDs
            </summary>
        </member>
        <member name="M:JominiEngine.Utility_Methods.CreateSysAdminJentry">
            <summary>
            Creates a JournalEntry for the attention of the game sysAdmin
            </summary>
            <returns>random double</returns>
        </member>
        <member name="M:JominiEngine.Utility_Methods.GetRandomDouble(System.Double,System.Double)">
            <summary>
            Generates a random double, specifying maximum and (optional) minimum values
            </summary>
            <returns>random double</returns>
            <param name="max">maximum value</param>
            <param name="min">minimum value</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.IsOdd(System.Int32)">
            <summary>
            Checks whether the supplied integer is odd or even
            </summary>
            <returns>bool indicating whether odd</returns>
            <param name="value">Integer to be checked</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateJentryPersonae(System.String)">
            <summary>
            Checks that a JournalEntry personae entry is in the correct format
            </summary>
            <returns>bool indicating whether the personae entry is valid</returns>
            <param name="personae">The personae entry to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateChallengeID(System.String)">
            <summary>
            Checks that an OwnershipChallenge id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateAilmentID(System.String)">
            <summary>
            Checks that an Ailment id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateTraitID(System.String)">
            <summary>
            Checks that a Trait id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateDays(System.Double)">
            <summary>
            Checks that a days value is in the correct range
            </summary>
            <returns>bool indicating whether the value is valid</returns>
            <param name="days">The value to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateCharacterStat(System.Double,System.Double)">
            <summary>
            Checks that a character statistic (combat, management, stature, virility, maxHealth, trait level) is in the correct range
            </summary>
            <returns>bool indicating whether the statistic is valid</returns>
            <param name="stat">The statistic to be validated</param>
            <param name="lowerLimit">The lower limit for the statistic to be validated (optional)</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateSeason(System.Byte)">
            <summary>
            Checks that a season is in the correct range
            </summary>
            <returns>bool indicating whether the season is valid</returns>
            <param name="season">The season to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateTerrainID(System.String)">
            <summary>
            Checks that a Terrain id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateLanguageID(System.String,System.String)">
            <summary>
            Checks that a Language id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
            <param name="langType">The type of id to be validated (lang, baseLang)</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateSiegeID(System.String)">
            <summary>
            Checks that a Siege id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateArmyID(System.String)">
            <summary>
            Checks that an Army id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateFiefDouble(System.Double,System.Double)">
            <summary>
            Checks a fief double property (keepLevel, industry, fields, loyalty, bailiffDaysInFief) is in the correct range
            </summary>
            <returns>bool indicating whether the double is valid</returns>
            <param name="input">The double to be validated</param>
            <param name="upperLimit">The upper limit of the double to be validated (optional)</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateNationalityID(System.String)">
            <summary>
            Checks that a nationality id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="nat">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidatePercentage(System.Double)">
            <summary>
            Checks that taxrate is in the correct range
            </summary>
            <returns>bool indicating whether the taxrate is valid</returns>
            <param name="tx">The taxrate to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateName(System.String)">
            <summary>
            Checks that a name is in the correct format
            </summary>
            <returns>bool indicating whether the name is valid</returns>
            <param name="name">The name to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidatePlaceID(System.String)">
            <summary>
            Checks that a Place id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.ValidateCharacterID(System.String)">
            <summary>
            Checks that a Character id is in the correct format
            </summary>
            <returns>bool indicating whether the id is valid</returns>
            <param name="id">The id to be validated</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.CheckStringValid(System.String,System.String)">
            <summary>
            Checks to see if a string meets the specified conditions (all letters, all numbers)
            </summary>
            <returns>bool indicating whether the string fulfils the conditions</returns>
            <param name="matchType">Type of pattern to match (letters, numbers, combined)</param>
            <param name="input">string to be converted</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.FirstCharToUpper(System.String)">
            <summary>
            Converts the first letter of a string to uppercase
            </summary>
            <returns>Converted string</returns>
            <param name="input">string to be converted</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.GenerateTraitSet(System.Collections.Generic.List{System.String})">
            <summary>
            Generates a random trait set for a Character
            </summary>
            <returns>Tuple(Trait, int)[] for use with a Character object</returns>
            <param name="availTraitKeys">List of trait keys to use when selecting new traits</param>
        </member>
        <member name="M:JominiEngine.Utility_Methods.GetArmy(System.String,JominiEngine.DisplayMessages@)">
            <summary>
            Get Army from ID. Returns the army and Success if armyID is valid and army is in armyMasterList; null and an error if otherwise
            </summary>
            <param name="armyID">ID of army</param>
            <param name="error">Error code on failure</param>
            <returns>Army as indicated by armyID, or null</returns>
        </member>
        <member name="M:JominiEngine.Utility_Methods.GetFief(System.String,JominiEngine.DisplayMessages@)">
            <summary>
            Get Fief from ID. Returns the fief and Success if fiefID is not null/empty and fief exists in FiefMasterList; null and an error if otherwise
            </summary>
            <param name="fiefID">ID of Fief</param>
            <param name="error">Error code on failure</param>
            <returns>Fief as indicated by fiefID, or null</returns>
        </member>
        <member name="M:JominiEngine.Utility_Methods.GetCharacter(System.String,JominiEngine.DisplayMessages@)">
            <summary>
            Get Character (NPC or PC) from ID. Returns the Character and Success if charID is not null/empty and of the correct format, and Character exists in npcMasterList or pcMasterList; null and an error if otherwise
            </summary>
            <param name="charID"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
    </members>
</doc>
